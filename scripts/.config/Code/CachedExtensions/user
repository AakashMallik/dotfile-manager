{"input":{"ourVersion":"1.20.1","commit":"f88bbf9137d24d36d968ea6b2911786bfe103002","locale":"en-gb","devMode":false,"absoluteFolderPath":"/home/humble_d/.vscode/extensions","isBuiltin":false,"tanslations":{},"mtime":1525750153880},"result":[{"name":"vscode-markdownlint","displayName":"markdownlint","description":"Markdown linting and style checking for Visual Studio Code","icon":"images/markdownlint-128.png","version":"0.15.0","author":"David Anson (https://dlaa.me/)","publisher":"DavidAnson","license":"MIT","homepage":"https://github.com/DavidAnson/vscode-markdownlint","repository":{"type":"git","url":"https://github.com/DavidAnson/vscode-markdownlint.git"},"bugs":"https://github.com/DavidAnson/vscode-markdownlint/issues","scripts":{"postinstall":"node ./node_modules/vscode/bin/install","lint":"eslint *.js","schema":"node generate-config-schema.js"},"categories":["Linters"],"engines":{"vscode":"^1.18.0"},"main":"/home/humble_d/.vscode/extensions/DavidAnson.vscode-markdownlint-0.15.0/extension","dependencies":{"markdownlint":"0.8.1"},"devDependencies":{"eslint":"~4.19.1","vscode":"~1.1.14","vsce":"~1.39.0","@types/node":"~9.6.6"},"keywords":["markdown","lint","CommonMark","md","multi-root ready"],"activationEvents":["onLanguage:markdown","onCommand:markdownlint.fixLine"],"contributes":{"jsonValidation":[{"fileMatch":".markdownlint.json","url":"./node_modules/markdownlint/schema/markdownlint-config-schema.json"}],"configuration":{"title":"markdownlint configuration","type":"object","properties":{"markdownlint.run":{"description":"Run the linter on save (onSave) or on type (onType)","scope":"resource","type":"string","enum":["onSave","onType"],"default":"onType"},"markdownlint.config":{"description":"markdownlint config object","scope":"resource","type":"object","default":{"MD013":false},"properties":{"default":{"description":"Default state for all rules","type":"boolean","default":true},"extends":{"description":"Path to configuration file to extend","type":"string","default":null},"MD001":{"description":"MD001/header-increment - Header levels should only increment by one level at a time","type":"boolean","default":true},"header-increment":{"description":"MD001/header-increment - Header levels should only increment by one level at a time","type":"boolean","default":true},"MD002":{"description":"MD002/first-header-h1 - First header should be a top level header","type":["boolean","object"],"default":true,"properties":{"level":{"description":"Header level","type":"integer","default":1}},"additionalProperties":false},"first-header-h1":{"description":"MD002/first-header-h1 - First header should be a top level header","type":["boolean","object"],"default":true,"properties":{"level":{"description":"Header level","type":"integer","default":1}},"additionalProperties":false},"MD003":{"description":"MD003/header-style - Header style","type":["boolean","object"],"default":true,"properties":{"style":{"description":"Header style","type":"string","enum":["consistent","atx","atx_closed","setext","setext_with_atx","setext_with_atx_closed"],"default":"consistent"}},"additionalProperties":false},"header-style":{"description":"MD003/header-style - Header style","type":["boolean","object"],"default":true,"properties":{"style":{"description":"Header style","type":"string","enum":["consistent","atx","atx_closed","setext","setext_with_atx","setext_with_atx_closed"],"default":"consistent"}},"additionalProperties":false},"MD004":{"description":"MD004/ul-style - Unordered list style","type":["boolean","object"],"default":true,"properties":{"style":{"description":"List style","type":"string","enum":["consistent","asterisk","plus","dash","sublist"],"default":"consistent"}},"additionalProperties":false},"ul-style":{"description":"MD004/ul-style - Unordered list style","type":["boolean","object"],"default":true,"properties":{"style":{"description":"List style","type":"string","enum":["consistent","asterisk","plus","dash","sublist"],"default":"consistent"}},"additionalProperties":false},"MD005":{"description":"MD005/list-indent - Inconsistent indentation for list items at the same level","type":"boolean","default":true},"list-indent":{"description":"MD005/list-indent - Inconsistent indentation for list items at the same level","type":"boolean","default":true},"MD006":{"description":"MD006/ul-start-left - Consider starting bulleted lists at the beginning of the line","type":"boolean","default":true},"ul-start-left":{"description":"MD006/ul-start-left - Consider starting bulleted lists at the beginning of the line","type":"boolean","default":true},"MD007":{"description":"MD007/ul-indent - Unordered list indentation","type":["boolean","object"],"default":true,"properties":{"indent":{"description":"Spaces for indent","type":"integer","default":2}},"additionalProperties":false},"ul-indent":{"description":"MD007/ul-indent - Unordered list indentation","type":["boolean","object"],"default":true,"properties":{"indent":{"description":"Spaces for indent","type":"integer","default":2}},"additionalProperties":false},"MD009":{"description":"MD009/no-trailing-spaces - Trailing spaces","type":["boolean","object"],"default":true,"properties":{"br_spaces":{"description":"Spaces for line break","type":"integer","default":0},"list_item_empty_lines":{"description":"Allow spaces for empty lines in list items","type":"boolean","default":false}},"additionalProperties":false},"no-trailing-spaces":{"description":"MD009/no-trailing-spaces - Trailing spaces","type":["boolean","object"],"default":true,"properties":{"br_spaces":{"description":"Spaces for line break","type":"integer","default":0},"list_item_empty_lines":{"description":"Allow spaces for empty lines in list items","type":"boolean","default":false}},"additionalProperties":false},"MD010":{"description":"MD010/no-hard-tabs - Hard tabs","type":["boolean","object"],"default":true,"properties":{"code_blocks":{"description":"Include code blocks","type":"boolean","default":true}},"additionalProperties":false},"no-hard-tabs":{"description":"MD010/no-hard-tabs - Hard tabs","type":["boolean","object"],"default":true,"properties":{"code_blocks":{"description":"Include code blocks","type":"boolean","default":true}},"additionalProperties":false},"MD011":{"description":"MD011/no-reversed-links - Reversed link syntax","type":"boolean","default":true},"no-reversed-links":{"description":"MD011/no-reversed-links - Reversed link syntax","type":"boolean","default":true},"MD012":{"description":"MD012/no-multiple-blanks - Multiple consecutive blank lines","type":["boolean","object"],"default":true,"properties":{"maximum":{"description":"Consecutive blank lines","type":"integer","default":1}},"additionalProperties":false},"no-multiple-blanks":{"description":"MD012/no-multiple-blanks - Multiple consecutive blank lines","type":["boolean","object"],"default":true,"properties":{"maximum":{"description":"Consecutive blank lines","type":"integer","default":1}},"additionalProperties":false},"MD013":{"description":"MD013/line-length - Line length","type":["boolean","object"],"default":true,"properties":{"line_length":{"description":"Number of characters","type":"integer","default":80},"code_blocks":{"description":"Include code blocks","type":"boolean","default":true},"tables":{"description":"Include tables","type":"boolean","default":true},"headers":{"description":"Include headers","type":"boolean","default":true}},"additionalProperties":false},"line-length":{"description":"MD013/line-length - Line length","type":["boolean","object"],"default":true,"properties":{"line_length":{"description":"Number of characters","type":"integer","default":80},"code_blocks":{"description":"Include code blocks","type":"boolean","default":true},"tables":{"description":"Include tables","type":"boolean","default":true},"headers":{"description":"Include headers","type":"boolean","default":true}},"additionalProperties":false},"MD014":{"description":"MD014/commands-show-output - Dollar signs used before commands without showing output","type":"boolean","default":true},"commands-show-output":{"description":"MD014/commands-show-output - Dollar signs used before commands without showing output","type":"boolean","default":true},"MD018":{"description":"MD018/no-missing-space-atx - No space after hash on atx style header","type":"boolean","default":true},"no-missing-space-atx":{"description":"MD018/no-missing-space-atx - No space after hash on atx style header","type":"boolean","default":true},"MD019":{"description":"MD019/no-multiple-space-atx - Multiple spaces after hash on atx style header","type":"boolean","default":true},"no-multiple-space-atx":{"description":"MD019/no-multiple-space-atx - Multiple spaces after hash on atx style header","type":"boolean","default":true},"MD020":{"description":"MD020/no-missing-space-closed-atx - No space inside hashes on closed atx style header","type":"boolean","default":true},"no-missing-space-closed-atx":{"description":"MD020/no-missing-space-closed-atx - No space inside hashes on closed atx style header","type":"boolean","default":true},"MD021":{"description":"MD021/no-multiple-space-closed-atx - Multiple spaces inside hashes on closed atx style header","type":"boolean","default":true},"no-multiple-space-closed-atx":{"description":"MD021/no-multiple-space-closed-atx - Multiple spaces inside hashes on closed atx style header","type":"boolean","default":true},"MD022":{"description":"MD022/blanks-around-headers - Headers should be surrounded by blank lines","type":"boolean","default":true},"blanks-around-headers":{"description":"MD022/blanks-around-headers - Headers should be surrounded by blank lines","type":"boolean","default":true},"MD023":{"description":"MD023/header-start-left - Headers must start at the beginning of the line","type":"boolean","default":true},"header-start-left":{"description":"MD023/header-start-left - Headers must start at the beginning of the line","type":"boolean","default":true},"MD024":{"description":"MD024/no-duplicate-header - Multiple headers with the same content","type":"boolean","default":true},"no-duplicate-header":{"description":"MD024/no-duplicate-header - Multiple headers with the same content","type":"boolean","default":true},"MD025":{"description":"MD025/single-h1 - Multiple top level headers in the same document","type":["boolean","object"],"default":true,"properties":{"level":{"description":"Header level","type":"integer","default":1}},"additionalProperties":false},"single-h1":{"description":"MD025/single-h1 - Multiple top level headers in the same document","type":["boolean","object"],"default":true,"properties":{"level":{"description":"Header level","type":"integer","default":1}},"additionalProperties":false},"MD026":{"description":"MD026/no-trailing-punctuation - Trailing punctuation in header","type":["boolean","object"],"default":true,"properties":{"punctuation":{"description":"Punctuation characters","type":"string","default":".,;:!?"}},"additionalProperties":false},"no-trailing-punctuation":{"description":"MD026/no-trailing-punctuation - Trailing punctuation in header","type":["boolean","object"],"default":true,"properties":{"punctuation":{"description":"Punctuation characters","type":"string","default":".,;:!?"}},"additionalProperties":false},"MD027":{"description":"MD027/no-multiple-space-blockquote - Multiple spaces after blockquote symbol","type":"boolean","default":true},"no-multiple-space-blockquote":{"description":"MD027/no-multiple-space-blockquote - Multiple spaces after blockquote symbol","type":"boolean","default":true},"MD028":{"description":"MD028/no-blanks-blockquote - Blank line inside blockquote","type":"boolean","default":true},"no-blanks-blockquote":{"description":"MD028/no-blanks-blockquote - Blank line inside blockquote","type":"boolean","default":true},"MD029":{"description":"MD029/ol-prefix - Ordered list item prefix","type":["boolean","object"],"default":true,"properties":{"style":{"description":"List style","type":"string","enum":["one","ordered","one_or_ordered"],"default":"one_or_ordered"}},"additionalProperties":false},"ol-prefix":{"description":"MD029/ol-prefix - Ordered list item prefix","type":["boolean","object"],"default":true,"properties":{"style":{"description":"List style","type":"string","enum":["one","ordered","one_or_ordered"],"default":"one_or_ordered"}},"additionalProperties":false},"MD030":{"description":"MD030/list-marker-space - Spaces after list markers","type":["boolean","object"],"default":true,"properties":{"ul_single":{"description":"Spaces for single-line unordered list items","type":"integer","default":1},"ol_single":{"description":"Spaces for single-line ordered list items","type":"integer","default":1},"ul_multi":{"description":"Spaces for multi-line unordered list items","type":"integer","default":1},"ol_multi":{"description":"Spaces for multi-line ordered list items","type":"integer","default":1}},"additionalProperties":false},"list-marker-space":{"description":"MD030/list-marker-space - Spaces after list markers","type":["boolean","object"],"default":true,"properties":{"ul_single":{"description":"Spaces for single-line unordered list items","type":"integer","default":1},"ol_single":{"description":"Spaces for single-line ordered list items","type":"integer","default":1},"ul_multi":{"description":"Spaces for multi-line unordered list items","type":"integer","default":1},"ol_multi":{"description":"Spaces for multi-line ordered list items","type":"integer","default":1}},"additionalProperties":false},"MD031":{"description":"MD031/blanks-around-fences - Fenced code blocks should be surrounded by blank lines","type":"boolean","default":true},"blanks-around-fences":{"description":"MD031/blanks-around-fences - Fenced code blocks should be surrounded by blank lines","type":"boolean","default":true},"MD032":{"description":"MD032/blanks-around-lists - Lists should be surrounded by blank lines","type":"boolean","default":true},"blanks-around-lists":{"description":"MD032/blanks-around-lists - Lists should be surrounded by blank lines","type":"boolean","default":true},"MD033":{"description":"MD033/no-inline-html - Inline HTML","type":["boolean","object"],"default":true,"properties":{"allowed_elements":{"description":"Allowed elements","type":"array","items":{"type":"string"},"default":[]}},"additionalProperties":false},"no-inline-html":{"description":"MD033/no-inline-html - Inline HTML","type":["boolean","object"],"default":true,"properties":{"allowed_elements":{"description":"Allowed elements","type":"array","items":{"type":"string"},"default":[]}},"additionalProperties":false},"MD034":{"description":"MD034/no-bare-urls - Bare URL used","type":"boolean","default":true},"no-bare-urls":{"description":"MD034/no-bare-urls - Bare URL used","type":"boolean","default":true},"MD035":{"description":"MD035/hr-style - Horizontal rule style","type":["boolean","object"],"default":true,"properties":{"style":{"description":"Horizontal rule style","type":"string","default":"consistent"}},"additionalProperties":false},"hr-style":{"description":"MD035/hr-style - Horizontal rule style","type":["boolean","object"],"default":true,"properties":{"style":{"description":"Horizontal rule style","type":"string","default":"consistent"}},"additionalProperties":false},"MD036":{"description":"MD036/no-emphasis-as-header - Emphasis used instead of a header","type":["boolean","object"],"default":true,"properties":{"punctuation":{"description":"Punctuation characters","type":"string","default":".,;:!?"}},"additionalProperties":false},"no-emphasis-as-header":{"description":"MD036/no-emphasis-as-header - Emphasis used instead of a header","type":["boolean","object"],"default":true,"properties":{"punctuation":{"description":"Punctuation characters","type":"string","default":".,;:!?"}},"additionalProperties":false},"MD037":{"description":"MD037/no-space-in-emphasis - Spaces inside emphasis markers","type":"boolean","default":true},"no-space-in-emphasis":{"description":"MD037/no-space-in-emphasis - Spaces inside emphasis markers","type":"boolean","default":true},"MD038":{"description":"MD038/no-space-in-code - Spaces inside code span elements","type":"boolean","default":true},"no-space-in-code":{"description":"MD038/no-space-in-code - Spaces inside code span elements","type":"boolean","default":true},"MD039":{"description":"MD039/no-space-in-links - Spaces inside link text","type":"boolean","default":true},"no-space-in-links":{"description":"MD039/no-space-in-links - Spaces inside link text","type":"boolean","default":true},"MD040":{"description":"MD040/fenced-code-language - Fenced code blocks should have a language specified","type":"boolean","default":true},"fenced-code-language":{"description":"MD040/fenced-code-language - Fenced code blocks should have a language specified","type":"boolean","default":true},"MD041":{"description":"MD041/first-line-h1 - First line in file should be a top level header","type":["boolean","object"],"default":true,"properties":{"level":{"description":"Header level","type":"integer","default":1},"front_matter_title":{"description":"RegExp for matching title in front matter","type":"string","default":"^\\s*title\\s*[:=]"}},"additionalProperties":false},"first-line-h1":{"description":"MD041/first-line-h1 - First line in file should be a top level header","type":["boolean","object"],"default":true,"properties":{"level":{"description":"Header level","type":"integer","default":1},"front_matter_title":{"description":"RegExp for matching title in front matter","type":"string","default":"^\\s*title\\s*[:=]"}},"additionalProperties":false},"MD042":{"description":"MD042/no-empty-links - No empty links","type":"boolean","default":true},"no-empty-links":{"description":"MD042/no-empty-links - No empty links","type":"boolean","default":true},"MD043":{"description":"MD043/required-headers - Required header structure","type":["boolean","object"],"default":true,"properties":{"headers":{"description":"List of headers","type":"array","items":{"type":"string"},"default":null}},"additionalProperties":false},"required-headers":{"description":"MD043/required-headers - Required header structure","type":["boolean","object"],"default":true,"properties":{"headers":{"description":"List of headers","type":"array","items":{"type":"string"},"default":null}},"additionalProperties":false},"MD044":{"description":"MD044/proper-names - Proper names should have the correct capitalization","type":["boolean","object"],"default":true,"properties":{"names":{"description":"List of proper names","type":"array","items":{"type":"string"},"default":null},"code_blocks":{"description":"Include code blocks","type":"boolean","default":true}},"additionalProperties":false},"proper-names":{"description":"MD044/proper-names - Proper names should have the correct capitalization","type":["boolean","object"],"default":true,"properties":{"names":{"description":"List of proper names","type":"array","items":{"type":"string"},"default":null},"code_blocks":{"description":"Include code blocks","type":"boolean","default":true}},"additionalProperties":false},"MD045":{"description":"MD045/no-alt-text - Images should have alternate text (alt text)","type":"boolean","default":true},"no-alt-text":{"description":"MD045/no-alt-text - Images should have alternate text (alt text)","type":"boolean","default":true},"headers":{"description":"headers - MD001, MD002, MD003, MD018, MD019, MD020, MD021, MD022, MD023, MD024, MD025, MD026, MD036, MD041, MD043","type":"boolean","default":true},"bullet":{"description":"bullet - MD004, MD005, MD006, MD007, MD032","type":"boolean","default":true},"ul":{"description":"ul - MD004, MD005, MD006, MD007, MD030, MD032","type":"boolean","default":true},"indentation":{"description":"indentation - MD005, MD006, MD007, MD027","type":"boolean","default":true},"whitespace":{"description":"whitespace - MD009, MD010, MD012, MD027, MD028, MD030, MD037, MD038, MD039","type":"boolean","default":true},"hard_tab":{"description":"hard_tab - MD010","type":"boolean","default":true},"links":{"description":"links - MD011, MD034, MD039, MD042","type":"boolean","default":true},"blank_lines":{"description":"blank_lines - MD012, MD022, MD031, MD032","type":"boolean","default":true},"line_length":{"description":"line_length - MD013","type":"boolean","default":true},"code":{"description":"code - MD014, MD031, MD038, MD040","type":"boolean","default":true},"atx":{"description":"atx - MD018, MD019","type":"boolean","default":true},"spaces":{"description":"spaces - MD018, MD019, MD020, MD021, MD023","type":"boolean","default":true},"atx_closed":{"description":"atx_closed - MD020, MD021","type":"boolean","default":true},"blockquote":{"description":"blockquote - MD027, MD028","type":"boolean","default":true},"ol":{"description":"ol - MD029, MD030, MD032","type":"boolean","default":true},"html":{"description":"html - MD033","type":"boolean","default":true},"url":{"description":"url - MD034","type":"boolean","default":true},"hr":{"description":"hr - MD035","type":"boolean","default":true},"emphasis":{"description":"emphasis - MD036, MD037","type":"boolean","default":true},"language":{"description":"language - MD040","type":"boolean","default":true},"spelling":{"description":"spelling - MD044","type":"boolean","default":true},"accessibility":{"description":"accessibility - MD045","type":"boolean","default":true},"images":{"description":"images - MD045","type":"boolean","default":true}},"additionalProperties":false}}}},"uuid":"daf8b44d-8aae-4da2-80c5-1f770219f643","isBuiltin":false,"id":"DavidAnson.vscode-markdownlint","extensionFolderPath":"/home/humble_d/.vscode/extensions/DavidAnson.vscode-markdownlint-0.15.0"},{"name":"vsc-material-theme","displayName":"Material Theme","description":"The most epic theme now for Visual Studio Code","version":"2.0.1","publisher":"Equinusocio","license":"Apache-2.0","author":"Mattia Astorino [@equinusocio]","icon":"logo.png","galleryBanner":{"color":"#11131C","theme":"dark"},"homepage":"https://github.com/equinusocio/vsc-material-theme","repository":{"type":"git","url":"https://github.com/equinusocio/vsc-material-theme.git"},"bugs":{"url":"https://github.com/equinusocio/vsc-material-theme/issues"},"engines":{"vscode":"^1.19.0"},"standard-version":{"scripts":{"postchangelog":"yarn gulp changelog-title"}},"scripts":{"build":"yarn build-icons && yarn build-themes && yarn build-icons-accents && yarn build-icons-variants","minimize-icons":"mkdir icons && svgo -f src/icons/svgs -o icons/","minimize-json":"json-minify themes/.material-theme-icons.tmp > themes/Material-Theme-Icons.json && yarn remove-icons-tmp","remove-icons":"rimraf icons && rimraf themes/Material-Theme-Icons.json","remove-icons-tmp":"rimraf themes/.material-theme-icons.tmp","build-icons":"yarn remove-icons && yarn minimize-icons && yarn gulp build:icons && yarn minimize-json","build-icons-accents":"yarn gulp build:icons.accents","build-icons-variants":"yarn gulp build:icons.variants","build-themes":"yarn gulp build:themes","release":"standard-version","postinstall":"node ./node_modules/vscode/bin/install && opencollective postinstall && tsc -p tsconfig.json"},"categories":["Themes","Other"],"activationEvents":["*"],"main":"/home/humble_d/.vscode/extensions/Equinusocio.vsc-material-theme-2.0.1/extensions/material.theme.config.js","contributes":{"commands":[{"category":"🎨 Material Theme","command":"material.theme.config","title":"Configuration"}],"configuration":{"properties":{"materialTheme.cache.workbench.settings":{"default":{},"type":"object","title":"Custom material theme settings","description":"Material theme settings object."}}},"themes":[{"label":"Material Theme","path":"./themes/Material-Theme-Default.json","uiTheme":"vs-dark"},{"label":"Material Theme High Contrast","path":"./themes/Material-Theme-Default-High-Contrast.json","uiTheme":"vs-dark"},{"label":"Material Theme Darker","path":"./themes/Material-Theme-Darker.json","uiTheme":"vs-dark"},{"label":"Material Theme Darker High Contrast","path":"./themes/Material-Theme-Darker-High-Contrast.json","uiTheme":"vs-dark"},{"label":"Material Theme Palenight","path":"./themes/Material-Theme-Palenight.json","uiTheme":"vs-dark"},{"label":"Material Theme Palenight High Contrast","path":"./themes/Material-Theme-Palenight-High-Contrast.json","uiTheme":"vs-dark"},{"label":"Material Theme Ocean","path":"./themes/Material-Theme-Ocean.json","uiTheme":"vs-dark"},{"label":"Material Theme Ocean High Contrast","path":"./themes/Material-Theme-Ocean-High-Contrast.json","uiTheme":"vs-dark"},{"label":"Material Theme Lighter","path":"./themes/Material-Theme-Lighter.json","uiTheme":"vs"},{"label":"Material Theme Lighter High Contrast","path":"./themes/Material-Theme-Lighter-High-Contrast.json","uiTheme":"vs"}],"iconThemes":[{"id":"eq-material-theme-icons","label":"Material Theme Icons","path":"./themes/Material-Theme-Icons.json"}]},"badges":[{"url":"https://camo.githubusercontent.com/d3c6e53aa66426dead24cdedab0e83082103bea6/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f657175696e75736f63696f2f7673632d6d6174657269616c2d7468656d652e7376673f7374796c653d666c61742d737175617265","href":"https://github.com/equinusocio/vsc-material-theme/issues","description":"Open issues"}],"devDependencies":{"@types/chalk":"2.2.0","@types/gulp":"4.0.5","@types/gulp-if":"0.0.33","@types/gulp-util":"3.0.34","@types/mustache":"0.8.30","@types/run-sequence":"0.0.30","@types/through2":"2.0.33","@types/yamljs":"0.2.30","@types/yargs":"10.0.1","babel-core":"6.26.0","babel-preset-es2015":"6.24.1","babel-root-import":"4.1.8","cpx":"1.5.0","eslint":"4.17.0","eslint-plugin-standard":"3.0.1","gulp":"3.9.1","gulp-bump":"3.1.0","gulp-conventional-changelog":"1.1.11","gulp-if":"2.0.2","gulp-stats":"0.0.4","gulp-util":"3.0.8","json-minify":"1.0.0","mustache":"2.3.0","rimraf":"2.6.2","run-sequence":"2.2.1","standard-version":"4.3.0","svgo":"1.0.4","typescript":"2.7.1","vscode":"1.1.10","yamljs":"0.3.0","yargs":"11.0.0"},"dependencies":{"opencollective":"1.0.3"},"collective":{"type":"opencollective","url":"https://opencollective.com/vsc-material-theme","logo":"https://opencollective.com/opencollective/logo.txt"},"uuid":"dffaf5a1-2219-434b-9d87-cb586fd59260","isBuiltin":false,"id":"Equinusocio.vsc-material-theme","extensionFolderPath":"/home/humble_d/.vscode/extensions/Equinusocio.vsc-material-theme-2.0.1"},{"name":"material-icon-theme","displayName":"Material Icon Theme","description":"Material Design Icons for Visual Studio Code","version":"3.4.0","publisher":"PKief","engines":{"vscode":"^1.5.0"},"homepage":"https://github.com/PKief/vscode-material-icon-theme/blob/master/README.md","repository":{"type":"git","url":"https://github.com/PKief/vscode-material-icon-theme.git"},"bugs":{"url":"https://github.com/PKief/vscode-material-icon-theme/issues"},"icon":"logo.png","galleryBanner":{"color":"#263238","theme":"dark"},"categories":["Themes"],"keywords":["icons","theme","material","icon-theme","customization"],"activationEvents":["*"],"main":"/home/humble_d/.vscode/extensions/PKief.material-icon-theme-3.4.0/out/src/extension","contributes":{"iconThemes":[{"id":"material-icon-theme","label":"Material Icon Theme","path":"./out/src/material-icons.json"}],"commands":[{"command":"material-icon-theme.activateIcons","title":"Material Icons: Activate Icon Theme"},{"command":"material-icon-theme.toggleIconPacks","title":"Material Icons: Configure Icon Packs"},{"command":"material-icon-theme.changeFolderTheme","title":"Material Icons: Change Folder Theme"},{"command":"material-icon-theme.changeFolderColor","title":"Material Icons: Change Folder Color"},{"command":"material-icon-theme.restoreDefaultConfig","title":"Material Icons: Restore Default Configuration"},{"command":"material-icon-theme.hidesExplorerArrows","title":"Material Icons: Hide Folder Arrows"}],"configuration":{"type":"object","title":"Material Icons configuration","properties":{"material-icon-theme.showWelcomeMessage":{"type":"boolean","default":true,"description":"Show the welcome message after first installation."},"material-icon-theme.showUpdateMessage":{"type":"boolean","default":false,"description":"Show the update message after each update."},"material-icon-theme.showReloadMessage":{"type":"boolean","default":true,"description":"Show restart notification."},"material-icon-theme.activeIconPack":{"type":"string","default":"angular","description":"Select an icon pack that enables specific icons."},"material-icon-theme.files.associations":{"type":"object","default":{},"description":"Set custom file icon associations."},"material-icon-theme.folders.associations":{"type":"object","default":{},"description":"Set custom folder icon associations."},"material-icon-theme.languages.associations":{"type":"object","default":{},"description":"Set custom language icon associations."},"material-icon-theme.folders.theme":{"type":"string","default":"specific","description":"Set the type for the folder icons.","enum":["specific","classic","none"]},"material-icon-theme.folders.color":{"type":"string","default":"#90a4ae","description":"Change the color of the folder icons."},"material-icon-theme.hidesExplorerArrows":{"type":"boolean","default":false,"description":"Hide explorer arrows before folder."}}}},"scripts":{"vscode:prepublish":"npm run build","prebuild":"npm run lint && npm run clean","build":"npm run compile && npm run generateJson","postbuild":"npm run check","clean":"rimraf ./out","compile":"tsc -p ./","compile:watch":"tsc -watch -p ./","generateJson":"ts-node ./scripts/icons/generateJson.ts","check":"ts-node scripts/icons/checks","postinstall":"node ./node_modules/vscode/bin/install","lint":"tslint -c tslint.json ./src/**/*.ts ./scripts/**/*ts","pretest":"npm run build","test":"node ./node_modules/vscode/bin/test","preview":"npm run build && ts-node ./scripts/preview"},"dependencies":{"lodash.merge":"^4.6.1","opn":"^5.3.0","semver":"^5.5.0"},"devDependencies":{"@types/mocha":"^5.2.0","@types/node":"^10.0.4","@types/puppeteer":"^1.3.1","bithound":"^1.7.0","mocha":"^5.1.1","puppeteer":"^1.3.0","rimraf":"^2.6.2","ts-node":"^6.0.2","tslint":"^5.10.0","typescript":"^2.8.3","vscode":"^1.1.17"},"uuid":"5db78037-f674-459f-a236-db622c427c5b","isBuiltin":false,"id":"PKief.material-icon-theme","extensionFolderPath":"/home/humble_d/.vscode/extensions/PKief.material-icon-theme-3.4.0"},{"name":"code-settings-sync","displayName":"Settings Sync","description":"Synchronize Settings, Snippets, Themes, File Icons, Launch, Keybindings, Workspaces and Extensions Across Multiple Machines Using GitHub Gist.","version":"2.9.2","icon":"images/cloud.png","publisher":"Shan","author":{"name":"Shan Khan","url":"http://shanalikhan.github.io","email":"shanalikhan@hotmail.com"},"homepage":"https://shanalikhan.github.io","galleryBanner":{"color":"#3B4859","theme":"dark"},"badges":[{"url":"https://vsmarketplacebadge.apphb.com/version/Shan.code-settings-sync.svg","description":"Latest Version","href":"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync"},{"url":"https://vsmarketplacebadge.apphb.com/installs/Shan.code-settings-sync.svg","description":"Total Downloads","href":"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync"},{"url":"https://vsmarketplacebadge.apphb.com/rating/Shan.code-settings-sync.svg","description":"Ratings","href":"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync"},{"url":"https://img.shields.io/badge/Join%20Community-slack-green.svg","description":"Join Slack Community","href":"https://join.slack.com/t/codesettingssync/shared_invite/enQtMzE3MjY5NTczNDMwLTYwMTIwNGExOGE2MTJkZWU0OTU5MmI3ZTc4N2JkZjhjMzY1OTk5OGExZjkwMDMzMDU4ZTBlYjk5MGQwZmMyNzk"}],"repository":{"type":"git","url":"https://github.com/shanalikhan/code-settings-sync.git"},"bugs":{"url":"https://github.com/shanalikhan/code-settings-sync/issues","email":"shanalikhan@hotmail.com"},"engines":{"vscode":"^1.8.0"},"categories":["Other"],"keywords":["vscode-sync","vscode-settings-sync","code-settings-sync","settings-sync","workspace-sync","multi-root ready"],"activationEvents":["*","onCommand:extension.updateSettings","onCommand:extension.downloadSettings","onCommand:extension.resetSettings","onCommand:extension.HowSettings","onCommand:extension.otherOptions"],"main":"/home/humble_d/.vscode/extensions/Shan.code-settings-sync-2.9.2/out/src/extension","contributes":{"commands":[{"command":"extension.HowSettings","title":"Sync : How To Configure"},{"command":"extension.downloadSettings","title":"Sync : Download Settings"},{"command":"extension.updateSettings","title":"Sync : Update / Upload Settings"},{"command":"extension.resetSettings","title":"Sync : Reset Extension Settings"},{"command":"extension.otherOptions","title":"Sync : Advanced Options"}],"keybindings":[{"key":"alt+shift+u","command":"extension.updateSettings"},{"key":"alt+shift+d","command":"extension.downloadSettings"}],"configuration":{"properties":{"sync.gist":{"type":"string","default":"","description":"GitHub GIST ID for Settings Sync."},"sync.lastUpload":{"type":"string","default":"","description":"Settings Sync last upload date. Set it as empty if you want to manually hit download."},"sync.lastDownload":{"type":"string","default":"","description":"Settings Sync last download date. Set it as empty if you want to manually hit download."},"sync.autoDownload":{"type":"boolean","default":false,"description":"Set it true to Auto Download the settings on code start. [Code Restart Required]"},"sync.autoUpload":{"type":"boolean","default":false,"description":"Set it true to Auto Upload on the settings change. [Code Restart Required]"},"sync.forceDownload":{"type":"boolean","default":false,"description":"Set it to true if you want to download the settings even when you have latest settings."},"sync.host":{"type":"string","default":"","description":"Set it to your GitHub Enterprise host if you want to use GHE."},"sync.pathPrefix":{"type":"string","default":"","description":"Set it to your GitHub Enterprise api prefix if you want to use GHE. Normally '/api/v3'. Only used when host is set."},"sync.quietSync":{"type":"boolean","default":false,"description":"When set to true, will show the result in status bar instead of summary page."},"sync.askGistName":{"type":"boolean","default":false,"description":"Ask gist name upon creating. Helps you to identify the gist if you have multiple gists."},"sync.removeExtensions":{"type":"boolean","default":true,"description":"Set it to false if you dont want to remove extensions while downloading."},"sync.syncExtensions":{"type":"boolean","default":true,"description":"Set it to false if you dont want to upload / download the extensions."}},"title":"Code Settings Sync Configuration Settings"}},"scripts":{"vscode:prepublish":"npm run compile","compile":"tsc -p ./","watch":"tsc -watch -p ./","postinstall":"node ./node_modules/vscode/bin/install"},"devDependencies":{"typescript":"^2.8.3","vscode":"^1.1.6","@types/node":"^10.0.3"},"dependencies":{"adm-zip":"0.4.7","chokidar":"^2.0.2","fs":"^0.0.2","github":"^11.0.0","https-proxy-agent":"^2.1.1","ncp":"^2.0.0","proper-lockfile":"^2.0.1","rimraf":"^2.6.2","temp":"^0.8.3"},"uuid":"e337c67b-55c2-4fef-8949-eb260e7fb7fd","isBuiltin":false,"id":"Shan.code-settings-sync","extensionFolderPath":"/home/humble_d/.vscode/extensions/Shan.code-settings-sync-2.9.2"},{"name":"vscode-theme-onedark","displayName":"Atom One Dark Theme","description":"One Dark Theme based on Atom","version":"2.1.0","publisher":"akamud","license":"MIT","galleryBanner":{"color":"#282C34","theme":"dark"},"engines":{"vscode":"^1.12.0"},"categories":["Themes"],"keywords":["atom","theme","dark","one dark"],"icon":"icon.png","contributes":{"themes":[{"label":"Atom One Dark","uiTheme":"vs-dark","path":"./themes/OneDark.json"}]},"bugs":{"url":"https://github.com/akamud/vscode-theme-onedark/issues","email":"muddibr@gmail.com"},"homepage":"https://github.com/akamud/vscode-theme-onedark","repository":{"type":"git","url":"https://github.com/akamud/vscode-theme-onedark"},"badges":[{"url":"https://vsmarketplacebadge.apphb.com/version/akamud.vscode-theme-onedark.svg","href":"https://marketplace.visualstudio.com/items/akamud.vscode-theme-onedark","description":"Extension version"},{"url":"https://vsmarketplacebadge.apphb.com/installs/akamud.vscode-theme-onedark.svg","href":"https://marketplace.visualstudio.com/items/akamud.vscode-theme-onedark","description":"Extension installs"},{"url":"https://vsmarketplacebadge.apphb.com/rating/akamud.vscode-theme-onedark.svg","href":"https://marketplace.visualstudio.com/items/akamud.vscode-theme-onedark","description":"Extension Rating"}],"uuid":"9b2c953d-6ad4-46d1-b18e-7e5992d1d8a6","isBuiltin":false,"id":"akamud.vscode-theme-onedark","extensionFolderPath":"/home/humble_d/.vscode/extensions/akamud.vscode-theme-onedark-2.1.0"},{"name":"vscode-theme-onelight","displayName":"Atom One Light Theme","description":"One Light Theme based on Atom","version":"2.1.0","publisher":"akamud","license":"MIT","galleryBanner":{"color":"#E8E8E8","theme":"light"},"engines":{"vscode":"^1.12.0"},"categories":["Themes"],"keywords":["atom","theme","light","one light"],"icon":"icon.png","contributes":{"themes":[{"label":"Atom One Light","uiTheme":"vs","path":"./themes/OneLight.json"}]},"bugs":{"url":"https://github.com/akamud/vscode-theme-onelight/issues","email":"muddibr@gmail.com"},"homepage":"https://github.com/akamud/vscode-theme-onelight","repository":{"type":"git","url":"https://github.com/akamud/vscode-theme-onelight"},"badges":[{"url":"https://vsmarketplacebadge.apphb.com/version/akamud.vscode-theme-onelight.svg","href":"https://marketplace.visualstudio.com/items/akamud.vscode-theme-onelight","description":"Extension version"},{"url":"https://vsmarketplacebadge.apphb.com/installs/akamud.vscode-theme-onelight.svg","href":"https://marketplace.visualstudio.com/items/akamud.vscode-theme-onelight","description":"Extension installs"},{"url":"https://vsmarketplacebadge.apphb.com/rating/akamud.vscode-theme-onelight.svg","href":"https://marketplace.visualstudio.com/items/akamud.vscode-theme-onelight","description":"Extension Rating"}],"uuid":"ee33fd31-7bb4-4252-8368-fdd5bcd94cf8","isBuiltin":false,"id":"akamud.vscode-theme-onelight","extensionFolderPath":"/home/humble_d/.vscode/extensions/akamud.vscode-theme-onelight-2.1.0"},{"name":"path-intellisense","displayName":"Path Intellisense","description":"Visual Studio Code plugin that autocompletes filenames","version":"1.4.2","publisher":"christian-kohler","engines":{"vscode":"^1.0.0"},"homepage":"https://github.com/ChristianKohler/PathIntellisense","repository":{"type":"git","url":"https://github.com/ChristianKohler/PathIntellisense.git"},"categories":["Other"],"activationEvents":["*"],"contributes":{"configuration":{"type":"object","title":"path-intellisense","properties":{"path-intellisense.extensionOnImport":{"type":"boolean","default":false,"description":"Adds the file extension to a import statements"},"path-intellisense.mappings":{"type":"object","default":{},"description":"Mappings for paths"},"path-intellisense.showHiddenFiles":{"type":"boolean","default":false,"description":"Show hidden files"},"path-intellisense.autoSlashAfterDirectory":{"type":"boolean","default":false,"description":"Automatically adds slash after directory"},"path-intellisense.absolutePathToWorkspace":{"type":"boolean","default":true,"description":"Sets an absolute path to the current workspace"}}}},"main":"/home/humble_d/.vscode/extensions/christian-kohler.path-intellisense-1.4.2/out/src/extension","icon":"icon/path-intellisense.png","scripts":{"vscode:prepublish":"node ./node_modules/vscode/bin/compile","compile":"node ./node_modules/vscode/bin/compile -watch -p ./","postinstall":"node ./node_modules/vscode/bin/install"},"devDependencies":{"@types/minimatch":"^2.0.29","typescript":"^2.3.2","vscode":"^0.11.0"},"dependencies":{"minimatch":"^3.0.4"},"uuid":"a41c1549-4053-44d4-bf30-60fc809b4a86","isBuiltin":false,"id":"christian-kohler.path-intellisense","extensionFolderPath":"/home/humble_d/.vscode/extensions/christian-kohler.path-intellisense-1.4.2"},{"name":"vscode-eslint","displayName":"ESLint","description":"Integrates ESLint into VS Code.","version":"1.4.8","author":"Microsoft Corporation","license":"MIT","repository":{"type":"git","url":"https://github.com/Microsoft/vscode-eslint.git"},"bugs":{"url":"https://github.com/Microsoft/vscode-eslint/issues"},"publisher":"dbaeumer","icon":"eslint_icon.png","categories":["Languages","Linters"],"keywords":["multi-root ready"],"engines":{"vscode":"^1.16.0"},"activationEvents":["*"],"main":"/home/humble_d/.vscode/extensions/dbaeumer.vscode-eslint-1.4.8/client/out/extension","contributes":{"configuration":{"type":"object","title":"ESLint","properties":{"eslint.enable":{"scope":"resource","type":"boolean","default":true,"description":"Controls whether eslint is enabled for JavaScript files or not."},"eslint.packageManager":{"scope":"resource","type":"string","enum":["npm","yarn"],"default":"npm","description":"The package manager you use to install node modules."},"eslint.alwaysShowStatus":{"type":"boolean","default":false,"description":"Always show the ESlint status bar item.","scope":"window"},"eslint.nodePath":{"scope":"resource","type":["string","null"],"default":null,"description":"A path added to NODE_PATH when resolving the eslint module."},"eslint._legacyModuleResolve":{"scope":"resource","type":"boolean","default":false,"description":"Uses the legacy module resolving."},"eslint.options":{"scope":"resource","type":"object","default":{},"description":"The eslint options object to provide args normally passed to eslint when executed from a command line (see http://eslint.org/docs/developer-guide/nodejs-api#cliengine)."},"eslint.trace.server":{"scope":"window","type":"string","enum":["off","messages","verbose"],"default":"off","description":"Traces the communication between VSCode and the eslint linter service."},"eslint.run":{"scope":"resource","type":"string","enum":["onSave","onType"],"default":"onType","description":"Run the linter on save (onSave) or on type (onType)"},"eslint.autoFixOnSave":{"scope":"resource","type":"boolean","default":false,"description":"Turns auto fix on save on or off."},"eslint.workingDirectories":{"scope":"resource","type":"array","items":{"anyOf":[{"type":"string"},{"type":"object","properties":{"directory":{"type":"string","description":"The working directory to use if a file's path start with this directory."},"changeProcessCWD":{"type":"boolean","description":"Whether the process's cwd should be changed as well."}}}]}},"eslint.validate":{"scope":"resource","type":"array","items":{"anyOf":[{"type":"string"},{"type":"object","properties":{"language":{"type":"string","description":"The language id to be validated by ESLint"},"autoFix":{"type":"boolean","description":"Whether auto fixes are provided for the language"}}}]},"default":["javascript","javascriptreact"],"description":"An array of language ids which should be validated by ESLint"},"eslint.provideLintTask":{"scope":"resource","type":"boolean","default":false,"description":"Controls whether a task for linting the whole workspace will be available."}}},"commands":[{"title":"Fix all auto-fixable Problems","category":"ESLint","command":"eslint.executeAutofix"},{"title":"Create '.eslintrc.json' File","category":"ESLint","command":"eslint.createConfig"},{"title":"Enable ESLint","category":"ESLint","command":"eslint.enable"},{"title":"Disable ESLint","category":"ESLint","command":"eslint.disable"},{"title":"Show Output Channel","category":"ESLint","command":"eslint.showOutputChannel"}],"jsonValidation":[{"fileMatch":".eslintrc","url":"http://json.schemastore.org/eslintrc"},{"fileMatch":".eslintrc.json","url":"http://json.schemastore.org/eslintrc"}]},"scripts":{"vscode:prepublish":"cd client && npm run update-vscode && cd .. && npm run compile","compile:client":"tsc -p ./client/tsconfig.json","compile:server":"tsc -p ./server/tsconfig.json","watch:client":"tsc -w -p ./client/tsconfig.json","watch:server":"tsc -w -p ./server/tsconfig.json","compile":"npm run compile:client && npm run compile:server","postinstall":"cd client && npm install && cd ../server && npm install && cd .."},"devDependencies":{"typescript":"^2.7.1","@types/node":"^6.0.90"},"uuid":"583b2b34-2c1e-4634-8c0b-0b82e283ea3a","isBuiltin":false,"id":"dbaeumer.vscode-eslint","extensionFolderPath":"/home/humble_d/.vscode/extensions/dbaeumer.vscode-eslint-1.4.8"},{"name":"vscode-perl","displayName":"Perl","description":"Perl code intelligence via ctags.","version":"1.14.4","author":"Henrik Sjööh <hello@enhenrik.nu> (http://www.enhenrik.nu)","license":"MIT","repository":{"type":"git","url":"https://github.com/henriiik/vscode-perl"},"bugs":{"url":"https://github.com/henriiik/vscode-perl/issues"},"homepage":"https://github.com/henriiik/vscode-perl","categories":["Languages"],"publisher":"henriiik","engines":{"vscode":"^1.14.0"},"activationEvents":["onLanguage:perl","onCommand:perl.generateTags"],"contributes":{"commands":[{"command":"perl.generateTags","title":"Perl: Generate Tags"}],"configuration":{"type":"object","title":"Perl configuration","properties":{"perl.ctagsPath":{"type":"string","default":"ctags","description":"The name or path to the ctags executable that will be used to generate tags."},"perl.ctagsFile":{"type":"string","default":".vstags","description":"The name of the tagsfile that will be generated in your workspace."},"perl.perltidy":{"type":"string","default":"perltidy","description":"The name or path to the perltidy executable that will be used when formatting code."},"perl.perltidyContainer":{"type":"string","default":"","description":"The name of a docker container that will be used to run perltidy. Leave blank if you dont want to use docker."}}}},"main":"/home/humble_d/.vscode/extensions/henriiik.vscode-perl-1.14.4/out/src/extension","scripts":{"vscode:prepublish":"tsc -p ./","compile":"tsc -watch -p ./","postinstall":"node ./node_modules/vscode/bin/install"},"devDependencies":{"@types/mocha":"^2.2.32","@types/node":"^6.0.52","mocha":"^2.3.3","tslint":"^5.5.0","typescript":"^2.4.2","vscode":"^1.1.4"},"uuid":"83f0dc3f-2481-48f2-ac28-13b42d9d0776","isBuiltin":false,"id":"henriiik.vscode-perl","extensionFolderPath":"/home/humble_d/.vscode/extensions/henriiik.vscode-perl-1.14.4"},{"name":"cpptools","displayName":"C/C++","description":"C/C++ IntelliSense, debugging, and code browsing.","version":"0.16.1","publisher":"ms-vscode","preview":true,"icon":"LanguageCCPP_color_128x.png","readme":"README.md","author":{"name":"Microsoft Corporation"},"license":"SEE LICENSE IN LICENSE.txt","engines":{"vscode":"^1.17.0"},"bugs":{"url":"https://github.com/Microsoft/vscode-cpptools/issues","email":"c_cpp_support@microsoft.com"},"repository":{"type":"git","url":"https://github.com/Microsoft/vscode-cpptools.git"},"homepage":"https://github.com/Microsoft/vscode-cpptools","qna":"https://github.com/Microsoft/vscode-cpptools/issues","keywords":["C","C++","IntelliSense","Microsoft","multi-root ready"],"categories":["Languages","Debuggers","Formatters","Linters"],"activationEvents":["onLanguage:cpp","onLanguage:c","onCommand:extension.pickNativeProcess","onCommand:extension.pickRemoteNativeProcess","onCommand:C_Cpp.ConfigurationEdit","onCommand:C_Cpp.ConfigurationSelect","onCommand:C_Cpp.SwitchHeaderSource","onCommand:C_Cpp.Navigate","onCommand:C_Cpp.GoToDeclaration","onCommand:C_Cpp.PeekDeclaration","onCommand:C_Cpp.ToggleErrorSquiggles","onCommand:C_Cpp.ToggleIncludeFallback","onCommand:C_Cpp.ToggleDimInactiveRegions","onCommand:C_Cpp.ShowReleaseNotes","onCommand:C_Cpp.ResetDatabase","onCommand:C_Cpp.PauseParsing","onCommand:C_Cpp.ResumeParsing","onCommand:C_Cpp.ShowParsingCommands","onCommand:C_Cpp.TakeSurvey","onDebug"],"main":"/home/humble_d/.vscode/extensions/ms-vscode.cpptools-0.16.1/out/src/main","contributes":{"problemMatchers":[{"name":"gcc","owner":"cpptools","fileLocation":["relative","${workspaceFolder}"],"pattern":{"regexp":"^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$","file":1,"line":2,"column":3,"severity":4,"message":5}}],"configuration":{"type":"object","title":"C/C++ Configuration","properties":{"C_Cpp.clang_format_path":{"type":["string","null"],"default":null,"description":"The full path of the clang-format executable.","scope":"resource"},"C_Cpp.clang_format_style":{"type":"string","default":"file","description":"Coding style, currently supports: Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit. Use \"file\" to load the style from a .clang-format file in the current or parent directory. Use \"{key: value, ...}\" to set specific parameters, e.g.: \"{ BasedOnStyle: LLVM, IndentWidth: 8 }\"","scope":"resource"},"C_Cpp.clang_format_fallbackStyle":{"type":"string","default":"Visual Studio","description":"Name of the predefined style used as a fallback in case clang-format is invoked with style \"file\" but the .clang-format file is not found. Possible values are Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit, none, or use \"{key: value, ...}\" to set specific parameters, e.g.: \"{ BasedOnStyle: LLVM, IndentWidth: 8 }\"","scope":"resource"},"C_Cpp.clang_format_sortIncludes":{"type":["boolean","null"],"enum":[true,false,null],"default":null,"description":"If set, overrides the include sorting behavior determined by the SortIncludes parameter.","scope":"resource"},"C_Cpp.intelliSenseEngine":{"type":"string","enum":["Default","Tag Parser"],"default":"Default","description":"Controls the IntelliSense provider. \"Tag Parser\" provides \"fuzzy\" results that are not context-aware. \"Default\" provides context-aware results and is in preview mode - member list, hover tooltips, and error squiggles are currently implemented. Features not yet implemented in the new default engine will use the tag parser engine instead.","scope":"resource"},"C_Cpp.intelliSenseEngineFallback":{"type":"string","enum":["Enabled","Disabled"],"default":"Enabled","description":"Controls whether the IntelliSense engine will automatically switch to the Tag Parser for translation units containing #include errors.","scope":"resource"},"C_Cpp.autocomplete":{"type":"string","enum":["Default","Disabled"],"default":"Default","description":"Controls the auto-completion provider. \"Default\" uses the active IntelliSense engine. \"Disabled\" uses the word-based completion provided by Visual Studio Code.","scope":"resource"},"C_Cpp.errorSquiggles":{"type":"string","enum":["Enabled","Disabled"],"default":"Enabled","description":"Controls whether suspected compile errors detected by the IntelliSense engine will be reported back to the editor. Warnings about #includes that could not be located will always be reported to the editor. This setting is ignored by the Tag Parser engine.","scope":"resource"},"C_Cpp.dimInactiveRegions":{"type":"boolean","default":true,"description":"Controls whether inactive preprocessor blocks are colored differently than active code. This setting is ignored by the Tag Parser engine.","scope":"resource"},"C_Cpp.formatting":{"type":"string","enum":["Default","Disabled"],"default":"Default","description":"\"Default\" enables code formatting. \"Disabled\" disables code formatting.","scope":"resource"},"C_Cpp.navigation.length":{"type":"number","default":60,"description":"Maximum character length of the scope/navigation UI in the status bar. The UI may not appear if this value is too large.","scope":"resource"},"C_Cpp.loggingLevel":{"type":"string","enum":["None","Error","Warning","Information"],"default":"Error","description":"The verbosity of logging in the Output Panel. The order of levels from least verbose to most verbose is: None < Error < Warning < Information.","scope":"resource"},"C_Cpp.autoAddFileAssociations":{"type":"boolean","default":true,"description":"Controls whether files are automatically added to files.associations when they are the target of a navigation operation from a C/C++ file.","scope":"resource"},"C_Cpp.workspaceParsingPriority":{"type":"string","enum":["highest","high","medium","low"],"default":"highest","description":"Controls whether parsing of the non-active workspace files uses sleeps to avoid using 100% CPU. The values highest/high/medium/low correspond to approximately 100/75/50/25% CPU usage.","scope":"resource"},"C_Cpp.exclusionPolicy":{"type":"string","enum":["checkFolders","checkFilesAndFolders"],"default":"checkFolders","description":"Instructs the extension when to use the \"files.exclude\" setting when determining which files should be added to the code navigation database while traversing through the paths in the \"browse.path\" array. \"checkFolders\" means that the exclusion filters will only be evaluated once per folder (individual files are not checked). \"checkFilesAndFolders\" means that the exclusion filters will be evaluated against every file and folder encountered. If your \"files.exclude\" setting only contains folders, then \"checkFolders\" is the best choice and will increase the speed at which the extension can initialize the code navigation database.","scope":"resource"},"C_Cpp.commentContinuationPatterns":{"type":"array","default":["/**"],"items":{"anyOf":[{"type":"string","description":"The pattern that begins a multiline or single line comment block. The continuation pattern defaults to ' * ' for multiline comment blocks or this string for single line comment blocks."},{"type":"object","properties":{"begin":{"type":"string","description":"The pattern that begins a multiline or single line comment block."},"continue":{"type":"string","description":"The text that will be inserted on the next line when Enter is pressed inside a multiline or single line comment block."}}}]},"description":"Defines the editor behavior for when the Enter key is pressed inside a multiline or single line comment block.","scope":"resource"}}},"commands":[{"command":"C_Cpp.ConfigurationSelect","title":"Select a Configuration...","category":"C/Cpp"},{"command":"C_Cpp.ConfigurationEdit","title":"Edit Configurations...","category":"C/Cpp"},{"command":"C_Cpp.GoToDeclaration","title":"Go to Declaration","category":"C/Cpp"},{"command":"C_Cpp.PeekDeclaration","title":"Peek Declaration","category":"C/Cpp"},{"command":"C_Cpp.SwitchHeaderSource","title":"Switch Header/Source","category":"C/Cpp"},{"command":"C_Cpp.Navigate","title":"Navigate...","category":"C/Cpp"},{"command":"C_Cpp.ToggleErrorSquiggles","title":"Toggle Error Squiggles","category":"C/Cpp"},{"command":"C_Cpp.ToggleIncludeFallback","title":"Toggle IntelliSense Engine Fallback on Include Errors","category":"C/Cpp"},{"command":"C_Cpp.ToggleDimInactiveRegions","title":"Toggle Inactive Region Colorization","category":"C/Cpp"},{"command":"workbench.action.gotoSymbol","title":"Go to Symbol in File..."},{"command":"workbench.action.showAllSymbols","title":"Go to Symbol in Workspace..."},{"command":"C_Cpp.ShowReleaseNotes","title":"Show Release Notes","category":"C/Cpp"},{"command":"C_Cpp.ResetDatabase","title":"Reset IntelliSense Database","category":"C/Cpp"},{"command":"C_Cpp.PauseParsing","title":"Pause Parsing","category":"C/Cpp"},{"command":"C_Cpp.ResumeParsing","title":"Resume Parsing","category":"C/Cpp"},{"command":"C_Cpp.ShowParsingCommands","title":"Show Parsing Commands","category":"C/Cpp"},{"command":"C_Cpp.TakeSurvey","title":"Take Survey","category":"C/Cpp"}],"keybindings":[{"command":"C_Cpp.GoToDeclaration","key":"Ctrl+F12","when":"editorTextFocus && editorLangId == 'cpp'"},{"command":"C_Cpp.GoToDeclaration","key":"Ctrl+F12","when":"editorTextFocus && editorLangId == 'c'"},{"command":"C_Cpp.PeekDeclaration","key":"Ctrl+Alt+F12","when":"editorTextFocus && editorLangId == 'cpp'"},{"command":"C_Cpp.PeekDeclaration","key":"Ctrl+Alt+F12","when":"editorTextFocus && editorLangId == 'c'"},{"command":"C_Cpp.SwitchHeaderSource","key":"Alt+O","when":"editorTextFocus && editorLangId == 'cpp'"},{"command":"C_Cpp.SwitchHeaderSource","key":"Alt+O","when":"editorTextFocus && editorLangId == 'c'"},{"command":"C_Cpp.Navigate","key":"Alt+N","when":"editorTextFocus && editorLangId == 'cpp'"},{"command":"C_Cpp.Navigate","key":"Alt+N","when":"editorTextFocus && editorLangId == 'c'"}],"debuggers":[{"type":"cppdbg","label":"C++ (GDB/LLDB)","enableBreakpointsFor":{"languageIds":["c","cpp"]},"adapterExecutableCommand":"extension.cppdbgAdapterExecutableCommand","aiKey":"AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217","variables":{"pickProcess":"extension.pickNativeProcess","pickRemoteProcess":"extension.pickRemoteNativeProcess"},"configurationAttributes":{"launch":{"required":["name","type","request","program"],"properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/a.out","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"args":{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[],"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"type":{"enum":["cppdbg"],"description":"Type of configuration.","pattern":"^(?!node2)","errorMessage":"The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.","patternErrorMessage":"\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."},"targetArchitecture":{"type":"string","description":"The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.","default":"x64","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"cwd":{"type":"string","description":"The working directory of the target","default":".","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"setupCommands":{"type":"array","description":"One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].","items":{"type":"object","properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":false}}},"default":[],"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"customLaunchSetupCommands":{"type":"array","description":"If provided, this replaces the default commands used to launch a target with some other commands. For example, this can be \"-target-attach\" in order to attach to a target process. An empty command list replaces the launch commands with nothing, which can be useful if the debugger is being provided launch options as command line options. Example: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].","items":{"type":"object","properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":false}}},"default":[],"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"launchCompleteCommand":{"enum":["exec-run","exec-continue","None"],"description":"The command to execute after the debugger is fully setup in order to cause the target process to run. Allowed values are \"exec-run\", \"exec-continue\", \"None\". The default value is \"exec-run\".","default":"exec-run","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"showDisplayString":{"type":"boolean","description":"When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.","default":true,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"environment":{"type":"array","description":"Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].","items":{"type":"object","properties":{"name":"string","value":"string"}},"default":[],"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"additionalSOLibSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"MIMode":{"type":"string","description":"Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".","default":"gdb","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"miDebuggerPath":{"type":"string","description":"The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.","default":"/usr/bin/gdb","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"miDebuggerServerAddress":{"type":"string","description":"Network address of the MI Debugger Server to connect to (example: localhost:1234).","default":"serveraddress:port","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"stopAtEntry":{"type":"boolean","description":"Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.","default":false,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"debugServerPath":{"type":"string","description":"Optional full path to debug server to launch. Defaults to null.","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"debugServerArgs":{"type":"string","description":"Optional debug server args. Defaults to null.","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"serverStarted":{"type":"string","description":"Optional server-started pattern to look for in the debug server output. Defaults to null.","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"filterStdout":{"type":"boolean","description":"Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.","default":true,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"filterStderr":{"type":"boolean","description":"Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.","default":false,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"serverLaunchTimeout":{"type":"integer","description":"Optional time, in milliseconds, for the debugger to wait for the debugServer to start up. Default is 10000.","default":"10000","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"coreDumpPath":{"type":"string","description":"Optional full path to a core dump file for the specified program. Defaults to null.","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"externalConsole":{"type":"boolean","description":"If true, a console is launched for the debuggee. If false, no console is launched. Note this option is ignored in some cases for technical reasons.","default":false,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.","default":false},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false},"traceResponse":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.","default":false}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).","type":"object","default":{"pipeCwd":"${workspaceRoot}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"enter the path for the debugger on the target machine, for example /usr/bin/gdb"},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"type":"array","description":"Command line arguments passed to the pipe program to configure the connection.","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine, for example /usr/bin/gdb.","default":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"name":{"type":"string","description":"Name of configuration; appears in the launch configuration drop down menu.","default":"Launch","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"request":{"enum":["launch"],"description":"Request type of configuration. Can be \"launch\" or \"attach\".","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"debugServer":{"type":"number","description":"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode","default":4711,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Task to run before debug session starts.","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Controls behavior of the internal debug console.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"windows":{"type":"object","description":"Windows specific launch configuration attributes.","properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/a.out"},"args":{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[]},"type":{"enum":["cppdbg"],"description":"Type of configuration.","pattern":"^(?!node2)","errorMessage":"The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.","patternErrorMessage":"\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."},"targetArchitecture":{"type":"string","description":"The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.","default":"x64"},"cwd":{"type":"string","description":"The working directory of the target","default":"."},"setupCommands":{"type":"array","description":"One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].","items":{"type":"object","properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":false}}},"default":[]},"customLaunchSetupCommands":{"type":"array","description":"If provided, this replaces the default commands used to launch a target with some other commands. For example, this can be \"-target-attach\" in order to attach to a target process. An empty command list replaces the launch commands with nothing, which can be useful if the debugger is being provided launch options as command line options. Example: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].","items":{"type":"object","properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":false}}},"default":[]},"launchCompleteCommand":{"enum":["exec-run","exec-continue","None"],"description":"The command to execute after the debugger is fully setup in order to cause the target process to run. Allowed values are \"exec-run\", \"exec-continue\", \"None\". The default value is \"exec-run\".","default":"exec-run"},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.","default":""},"showDisplayString":{"type":"boolean","description":"When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.","default":true},"environment":{"type":"array","description":"Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].","items":{"type":"object","properties":{"name":"string","value":"string"}},"default":[]},"additionalSOLibSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"MIMode":{"type":"string","description":"Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".","default":"gdb"},"miDebuggerPath":{"type":"string","description":"The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.","default":"/usr/bin/gdb"},"miDebuggerServerAddress":{"type":"string","description":"Network address of the MI Debugger Server to connect to (example: localhost:1234).","default":"serveraddress:port"},"stopAtEntry":{"type":"boolean","description":"Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.","default":false},"debugServerPath":{"type":"string","description":"Optional full path to debug server to launch. Defaults to null.","default":""},"debugServerArgs":{"type":"string","description":"Optional debug server args. Defaults to null.","default":""},"serverStarted":{"type":"string","description":"Optional server-started pattern to look for in the debug server output. Defaults to null.","default":""},"filterStdout":{"type":"boolean","description":"Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.","default":true},"filterStderr":{"type":"boolean","description":"Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.","default":false},"serverLaunchTimeout":{"type":"integer","description":"Optional time, in milliseconds, for the debugger to wait for the debugServer to start up. Default is 10000.","default":"10000"},"coreDumpPath":{"type":"string","description":"Optional full path to a core dump file for the specified program. Defaults to null.","default":""},"externalConsole":{"type":"boolean","description":"If true, a console is launched for the debuggee. If false, no console is launched. Note this option is ignored in some cases for technical reasons.","default":false},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.","default":false},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false},"traceResponse":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.","default":false}}},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).","type":"object","default":{"pipeCwd":"${workspaceRoot}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"enter the path for the debugger on the target machine, for example /usr/bin/gdb"},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"type":"array","description":"Command line arguments passed to the pipe program to configure the connection.","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine, for example /usr/bin/gdb.","default":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"name":{"type":"string","description":"Name of configuration; appears in the launch configuration drop down menu.","default":"Launch"},"request":{"enum":["launch"],"description":"Request type of configuration. Can be \"launch\" or \"attach\"."},"debugServer":{"type":"number","description":"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Task to run before debug session starts."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Controls behavior of the internal debug console.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"osx":{"type":"object","description":"OS X specific launch configuration attributes.","properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/a.out"},"args":{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[]},"type":{"enum":["cppdbg"],"description":"Type of configuration.","pattern":"^(?!node2)","errorMessage":"The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.","patternErrorMessage":"\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."},"targetArchitecture":{"type":"string","description":"The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.","default":"x64"},"cwd":{"type":"string","description":"The working directory of the target","default":"."},"setupCommands":{"type":"array","description":"One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].","items":{"type":"object","properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":false}}},"default":[]},"customLaunchSetupCommands":{"type":"array","description":"If provided, this replaces the default commands used to launch a target with some other commands. For example, this can be \"-target-attach\" in order to attach to a target process. An empty command list replaces the launch commands with nothing, which can be useful if the debugger is being provided launch options as command line options. Example: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].","items":{"type":"object","properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":false}}},"default":[]},"launchCompleteCommand":{"enum":["exec-run","exec-continue","None"],"description":"The command to execute after the debugger is fully setup in order to cause the target process to run. Allowed values are \"exec-run\", \"exec-continue\", \"None\". The default value is \"exec-run\".","default":"exec-run"},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.","default":""},"showDisplayString":{"type":"boolean","description":"When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.","default":true},"environment":{"type":"array","description":"Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].","items":{"type":"object","properties":{"name":"string","value":"string"}},"default":[]},"additionalSOLibSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"MIMode":{"type":"string","description":"Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".","default":"gdb"},"miDebuggerPath":{"type":"string","description":"The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.","default":"/usr/bin/gdb"},"miDebuggerServerAddress":{"type":"string","description":"Network address of the MI Debugger Server to connect to (example: localhost:1234).","default":"serveraddress:port"},"stopAtEntry":{"type":"boolean","description":"Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.","default":false},"debugServerPath":{"type":"string","description":"Optional full path to debug server to launch. Defaults to null.","default":""},"debugServerArgs":{"type":"string","description":"Optional debug server args. Defaults to null.","default":""},"serverStarted":{"type":"string","description":"Optional server-started pattern to look for in the debug server output. Defaults to null.","default":""},"filterStdout":{"type":"boolean","description":"Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.","default":true},"filterStderr":{"type":"boolean","description":"Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.","default":false},"serverLaunchTimeout":{"type":"integer","description":"Optional time, in milliseconds, for the debugger to wait for the debugServer to start up. Default is 10000.","default":"10000"},"coreDumpPath":{"type":"string","description":"Optional full path to a core dump file for the specified program. Defaults to null.","default":""},"externalConsole":{"type":"boolean","description":"If true, a console is launched for the debuggee. If false, no console is launched. Note this option is ignored in some cases for technical reasons.","default":false},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.","default":false},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false},"traceResponse":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.","default":false}}},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).","type":"object","default":{"pipeCwd":"${workspaceRoot}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"enter the path for the debugger on the target machine, for example /usr/bin/gdb"},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"type":"array","description":"Command line arguments passed to the pipe program to configure the connection.","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine, for example /usr/bin/gdb.","default":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"name":{"type":"string","description":"Name of configuration; appears in the launch configuration drop down menu.","default":"Launch"},"request":{"enum":["launch"],"description":"Request type of configuration. Can be \"launch\" or \"attach\"."},"debugServer":{"type":"number","description":"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Task to run before debug session starts."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Controls behavior of the internal debug console.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"linux":{"type":"object","description":"Linux specific launch configuration attributes.","properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/a.out"},"args":{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[]},"type":{"enum":["cppdbg"],"description":"Type of configuration.","pattern":"^(?!node2)","errorMessage":"The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.","patternErrorMessage":"\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."},"targetArchitecture":{"type":"string","description":"The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.","default":"x64"},"cwd":{"type":"string","description":"The working directory of the target","default":"."},"setupCommands":{"type":"array","description":"One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].","items":{"type":"object","properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":false}}},"default":[]},"customLaunchSetupCommands":{"type":"array","description":"If provided, this replaces the default commands used to launch a target with some other commands. For example, this can be \"-target-attach\" in order to attach to a target process. An empty command list replaces the launch commands with nothing, which can be useful if the debugger is being provided launch options as command line options. Example: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].","items":{"type":"object","properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":false}}},"default":[]},"launchCompleteCommand":{"enum":["exec-run","exec-continue","None"],"description":"The command to execute after the debugger is fully setup in order to cause the target process to run. Allowed values are \"exec-run\", \"exec-continue\", \"None\". The default value is \"exec-run\".","default":"exec-run"},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.","default":""},"showDisplayString":{"type":"boolean","description":"When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.","default":true},"environment":{"type":"array","description":"Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].","items":{"type":"object","properties":{"name":"string","value":"string"}},"default":[]},"additionalSOLibSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"MIMode":{"type":"string","description":"Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".","default":"gdb"},"miDebuggerPath":{"type":"string","description":"The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.","default":"/usr/bin/gdb"},"miDebuggerServerAddress":{"type":"string","description":"Network address of the MI Debugger Server to connect to (example: localhost:1234).","default":"serveraddress:port"},"stopAtEntry":{"type":"boolean","description":"Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.","default":false},"debugServerPath":{"type":"string","description":"Optional full path to debug server to launch. Defaults to null.","default":""},"debugServerArgs":{"type":"string","description":"Optional debug server args. Defaults to null.","default":""},"serverStarted":{"type":"string","description":"Optional server-started pattern to look for in the debug server output. Defaults to null.","default":""},"filterStdout":{"type":"boolean","description":"Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.","default":true},"filterStderr":{"type":"boolean","description":"Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.","default":false},"serverLaunchTimeout":{"type":"integer","description":"Optional time, in milliseconds, for the debugger to wait for the debugServer to start up. Default is 10000.","default":"10000"},"coreDumpPath":{"type":"string","description":"Optional full path to a core dump file for the specified program. Defaults to null.","default":""},"externalConsole":{"type":"boolean","description":"If true, a console is launched for the debuggee. If false, no console is launched. Note this option is ignored in some cases for technical reasons.","default":false},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.","default":false},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false},"traceResponse":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.","default":false}}},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).","type":"object","default":{"pipeCwd":"${workspaceRoot}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"enter the path for the debugger on the target machine, for example /usr/bin/gdb"},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"type":"array","description":"Command line arguments passed to the pipe program to configure the connection.","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine, for example /usr/bin/gdb.","default":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"name":{"type":"string","description":"Name of configuration; appears in the launch configuration drop down menu.","default":"Launch"},"request":{"enum":["launch"],"description":"Request type of configuration. Can be \"launch\" or \"attach\"."},"debugServer":{"type":"number","description":"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Task to run before debug session starts."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Controls behavior of the internal debug console.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."}},"additionalProperties":false,"type":"object"},"attach":{"required":["name","type","request","program","processId"],"properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/a.out","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"type":{"enum":["cppdbg"],"description":"Type of configuration.","pattern":"^(?!node2)","errorMessage":"The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.","patternErrorMessage":"\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."},"targetArchitecture":{"type":"string","description":"The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.","default":"x64","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"showDisplayString":{"type":"boolean","description":"When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.","default":true,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"additionalSOLibSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"MIMode":{"type":"string","description":"Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".","default":"gdb","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"miDebuggerPath":{"type":"string","description":"The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.","default":"/usr/bin/gdb","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"miDebuggerServerAddress":{"type":"string","description":"Network address of the MI Debugger Server to connect to (example: localhost:1234).","default":"serveraddress:port","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"processId":{"anyOf":[{"type":"string","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":"${command:pickProcess}"},{"type":"integer","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":0}],"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"filterStdout":{"type":"boolean","description":"Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.","default":true,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"filterStderr":{"type":"boolean","description":"Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.","default":false,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.","default":false},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false},"traceResponse":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.","default":false}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).","type":"object","default":{"pipeCwd":"${workspaceRoot}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"enter the path for the debugger on the target machine, for example /usr/bin/gdb"},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"type":"array","description":"Command line arguments passed to the pipe program to configure the connection.","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine, for example /usr/bin/gdb.","default":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"setupCommands":{"type":"array","description":"One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].","items":{"type":"object","properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":false}}},"default":[],"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"name":{"type":"string","description":"Name of configuration; appears in the launch configuration drop down menu.","default":"Launch","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"request":{"enum":["attach"],"description":"Request type of configuration. Can be \"launch\" or \"attach\".","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"debugServer":{"type":"number","description":"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode","default":4711,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Task to run before debug session starts.","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Controls behavior of the internal debug console.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"windows":{"type":"object","description":"Windows specific launch configuration attributes.","properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/a.out"},"type":{"enum":["cppdbg"],"description":"Type of configuration.","pattern":"^(?!node2)","errorMessage":"The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.","patternErrorMessage":"\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."},"targetArchitecture":{"type":"string","description":"The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.","default":"x64"},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.","default":""},"showDisplayString":{"type":"boolean","description":"When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.","default":true},"additionalSOLibSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"MIMode":{"type":"string","description":"Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".","default":"gdb"},"miDebuggerPath":{"type":"string","description":"The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.","default":"/usr/bin/gdb"},"miDebuggerServerAddress":{"type":"string","description":"Network address of the MI Debugger Server to connect to (example: localhost:1234).","default":"serveraddress:port"},"processId":{"anyOf":[{"type":"string","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":"${command:pickProcess}"},{"type":"integer","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":0}]},"filterStdout":{"type":"boolean","description":"Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.","default":true},"filterStderr":{"type":"boolean","description":"Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.","default":false},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.","default":false},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false},"traceResponse":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.","default":false}}},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).","type":"object","default":{"pipeCwd":"${workspaceRoot}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"enter the path for the debugger on the target machine, for example /usr/bin/gdb"},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"type":"array","description":"Command line arguments passed to the pipe program to configure the connection.","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine, for example /usr/bin/gdb.","default":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"setupCommands":{"type":"array","description":"One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].","items":{"type":"object","properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":false}}},"default":[]},"name":{"type":"string","description":"Name of configuration; appears in the launch configuration drop down menu.","default":"Launch"},"request":{"enum":["attach"],"description":"Request type of configuration. Can be \"launch\" or \"attach\"."},"debugServer":{"type":"number","description":"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Task to run before debug session starts."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Controls behavior of the internal debug console.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"osx":{"type":"object","description":"OS X specific launch configuration attributes.","properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/a.out"},"type":{"enum":["cppdbg"],"description":"Type of configuration.","pattern":"^(?!node2)","errorMessage":"The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.","patternErrorMessage":"\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."},"targetArchitecture":{"type":"string","description":"The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.","default":"x64"},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.","default":""},"showDisplayString":{"type":"boolean","description":"When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.","default":true},"additionalSOLibSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"MIMode":{"type":"string","description":"Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".","default":"gdb"},"miDebuggerPath":{"type":"string","description":"The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.","default":"/usr/bin/gdb"},"miDebuggerServerAddress":{"type":"string","description":"Network address of the MI Debugger Server to connect to (example: localhost:1234).","default":"serveraddress:port"},"processId":{"anyOf":[{"type":"string","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":"${command:pickProcess}"},{"type":"integer","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":0}]},"filterStdout":{"type":"boolean","description":"Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.","default":true},"filterStderr":{"type":"boolean","description":"Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.","default":false},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.","default":false},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false},"traceResponse":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.","default":false}}},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).","type":"object","default":{"pipeCwd":"${workspaceRoot}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"enter the path for the debugger on the target machine, for example /usr/bin/gdb"},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"type":"array","description":"Command line arguments passed to the pipe program to configure the connection.","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine, for example /usr/bin/gdb.","default":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"setupCommands":{"type":"array","description":"One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].","items":{"type":"object","properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":false}}},"default":[]},"name":{"type":"string","description":"Name of configuration; appears in the launch configuration drop down menu.","default":"Launch"},"request":{"enum":["attach"],"description":"Request type of configuration. Can be \"launch\" or \"attach\"."},"debugServer":{"type":"number","description":"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Task to run before debug session starts."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Controls behavior of the internal debug console.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"linux":{"type":"object","description":"Linux specific launch configuration attributes.","properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/a.out"},"type":{"enum":["cppdbg"],"description":"Type of configuration.","pattern":"^(?!node2)","errorMessage":"The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.","patternErrorMessage":"\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."},"targetArchitecture":{"type":"string","description":"The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.","default":"x64"},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.","default":""},"showDisplayString":{"type":"boolean","description":"When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.","default":true},"additionalSOLibSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"MIMode":{"type":"string","description":"Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".","default":"gdb"},"miDebuggerPath":{"type":"string","description":"The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.","default":"/usr/bin/gdb"},"miDebuggerServerAddress":{"type":"string","description":"Network address of the MI Debugger Server to connect to (example: localhost:1234).","default":"serveraddress:port"},"processId":{"anyOf":[{"type":"string","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":"${command:pickProcess}"},{"type":"integer","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":0}]},"filterStdout":{"type":"boolean","description":"Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.","default":true},"filterStderr":{"type":"boolean","description":"Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.","default":false},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.","default":false},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false},"traceResponse":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.","default":false}}},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).","type":"object","default":{"pipeCwd":"${workspaceRoot}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"enter the path for the debugger on the target machine, for example /usr/bin/gdb"},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"type":"array","description":"Command line arguments passed to the pipe program to configure the connection.","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine, for example /usr/bin/gdb.","default":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"setupCommands":{"type":"array","description":"One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].","items":{"type":"object","properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":false}}},"default":[]},"name":{"type":"string","description":"Name of configuration; appears in the launch configuration drop down menu.","default":"Launch"},"request":{"enum":["attach"],"description":"Request type of configuration. Can be \"launch\" or \"attach\"."},"debugServer":{"type":"number","description":"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Task to run before debug session starts."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Controls behavior of the internal debug console.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."}},"additionalProperties":false,"type":"object"}}},{"type":"cppvsdbg","label":"C++ (Windows)","enableBreakpointsFor":{"languageIds":["c","cpp"]},"adapterExecutableCommand":"extension.cppvsdbgAdapterExecutableCommand","aiKey":"AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217","variables":{"pickProcess":"extension.pickNativeProcess"},"configurationAttributes":{"launch":{"required":["name","type","request","program","cwd"],"properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/program.exe","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"args":{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[],"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"type":{"enum":["cppvsdbg"],"description":"Type of configuration.","pattern":"^(?!node2)","errorMessage":"The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.","patternErrorMessage":"\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."},"cwd":{"type":"string","description":"The working directory of the target.","default":"${workspaceRoot}","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"environment":{"type":"array","description":"Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].","items":{"type":"object","properties":{"name":"string","value":"string"}},"default":[],"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"symbolSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"stopAtEntry":{"type":"boolean","description":"Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.","default":false,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"dumpPath":{"type":"string","description":"Optional full path to a dump file for the specified program. Example: \"c:\\temp\\app.dmp\". Defaults to null.","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process.","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"externalConsole":{"type":"boolean","description":"If true, a console is launched for the debuggee. If false, no console is launched.","default":false,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic debug engine messages should be logged to the Debug Console. Defaults to false.","default":false}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"name":{"type":"string","description":"Name of configuration; appears in the launch configuration drop down menu.","default":"Launch","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"request":{"enum":["launch"],"description":"Request type of configuration. Can be \"launch\" or \"attach\".","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"debugServer":{"type":"number","description":"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode","default":4711,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Task to run before debug session starts.","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Controls behavior of the internal debug console.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"windows":{"type":"object","description":"Windows specific launch configuration attributes.","properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/program.exe"},"args":{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[]},"type":{"enum":["cppvsdbg"],"description":"Type of configuration.","pattern":"^(?!node2)","errorMessage":"The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.","patternErrorMessage":"\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."},"cwd":{"type":"string","description":"The working directory of the target.","default":"${workspaceRoot}"},"environment":{"type":"array","description":"Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].","items":{"type":"object","properties":{"name":"string","value":"string"}},"default":[]},"symbolSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"stopAtEntry":{"type":"boolean","description":"Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.","default":false},"dumpPath":{"type":"string","description":"Optional full path to a dump file for the specified program. Example: \"c:\\temp\\app.dmp\". Defaults to null.","default":""},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process.","default":""},"externalConsole":{"type":"boolean","description":"If true, a console is launched for the debuggee. If false, no console is launched.","default":false},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic debug engine messages should be logged to the Debug Console. Defaults to false.","default":false}}},"name":{"type":"string","description":"Name of configuration; appears in the launch configuration drop down menu.","default":"Launch"},"request":{"enum":["launch"],"description":"Request type of configuration. Can be \"launch\" or \"attach\"."},"debugServer":{"type":"number","description":"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Task to run before debug session starts."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Controls behavior of the internal debug console.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"osx":{"type":"object","description":"OS X specific launch configuration attributes.","properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/program.exe"},"args":{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[]},"type":{"enum":["cppvsdbg"],"description":"Type of configuration.","pattern":"^(?!node2)","errorMessage":"The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.","patternErrorMessage":"\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."},"cwd":{"type":"string","description":"The working directory of the target.","default":"${workspaceRoot}"},"environment":{"type":"array","description":"Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].","items":{"type":"object","properties":{"name":"string","value":"string"}},"default":[]},"symbolSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"stopAtEntry":{"type":"boolean","description":"Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.","default":false},"dumpPath":{"type":"string","description":"Optional full path to a dump file for the specified program. Example: \"c:\\temp\\app.dmp\". Defaults to null.","default":""},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process.","default":""},"externalConsole":{"type":"boolean","description":"If true, a console is launched for the debuggee. If false, no console is launched.","default":false},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic debug engine messages should be logged to the Debug Console. Defaults to false.","default":false}}},"name":{"type":"string","description":"Name of configuration; appears in the launch configuration drop down menu.","default":"Launch"},"request":{"enum":["launch"],"description":"Request type of configuration. Can be \"launch\" or \"attach\"."},"debugServer":{"type":"number","description":"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Task to run before debug session starts."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Controls behavior of the internal debug console.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"linux":{"type":"object","description":"Linux specific launch configuration attributes.","properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/program.exe"},"args":{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[]},"type":{"enum":["cppvsdbg"],"description":"Type of configuration.","pattern":"^(?!node2)","errorMessage":"The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.","patternErrorMessage":"\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."},"cwd":{"type":"string","description":"The working directory of the target.","default":"${workspaceRoot}"},"environment":{"type":"array","description":"Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].","items":{"type":"object","properties":{"name":"string","value":"string"}},"default":[]},"symbolSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"stopAtEntry":{"type":"boolean","description":"Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.","default":false},"dumpPath":{"type":"string","description":"Optional full path to a dump file for the specified program. Example: \"c:\\temp\\app.dmp\". Defaults to null.","default":""},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process.","default":""},"externalConsole":{"type":"boolean","description":"If true, a console is launched for the debuggee. If false, no console is launched.","default":false},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic debug engine messages should be logged to the Debug Console. Defaults to false.","default":false}}},"name":{"type":"string","description":"Name of configuration; appears in the launch configuration drop down menu.","default":"Launch"},"request":{"enum":["launch"],"description":"Request type of configuration. Can be \"launch\" or \"attach\"."},"debugServer":{"type":"number","description":"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Task to run before debug session starts."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Controls behavior of the internal debug console.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."}},"additionalProperties":false,"type":"object"},"attach":{"required":["name","type","request","processId"],"properties":{"type":{"enum":["cppvsdbg"],"description":"Type of configuration.","pattern":"^(?!node2)","errorMessage":"The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.","patternErrorMessage":"\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."},"symbolSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"processId":{"anyOf":[{"type":"string","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":"${command:pickProcess}"},{"type":"integer","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":0}],"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process.","default":"","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"name":{"type":"string","description":"Name of configuration; appears in the launch configuration drop down menu.","default":"Launch","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"request":{"enum":["attach"],"description":"Request type of configuration. Can be \"launch\" or \"attach\".","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"debugServer":{"type":"number","description":"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode","default":4711,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Task to run before debug session starts.","pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Controls behavior of the internal debug console.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"windows":{"type":"object","description":"Windows specific launch configuration attributes.","properties":{"type":{"enum":["cppvsdbg"],"description":"Type of configuration.","pattern":"^(?!node2)","errorMessage":"The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.","patternErrorMessage":"\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."},"symbolSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"processId":{"anyOf":[{"type":"string","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":"${command:pickProcess}"},{"type":"integer","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":0}]},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process.","default":""},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false}}},"name":{"type":"string","description":"Name of configuration; appears in the launch configuration drop down menu.","default":"Launch"},"request":{"enum":["attach"],"description":"Request type of configuration. Can be \"launch\" or \"attach\"."},"debugServer":{"type":"number","description":"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Task to run before debug session starts."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Controls behavior of the internal debug console.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"osx":{"type":"object","description":"OS X specific launch configuration attributes.","properties":{"type":{"enum":["cppvsdbg"],"description":"Type of configuration.","pattern":"^(?!node2)","errorMessage":"The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.","patternErrorMessage":"\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."},"symbolSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"processId":{"anyOf":[{"type":"string","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":"${command:pickProcess}"},{"type":"integer","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":0}]},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process.","default":""},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false}}},"name":{"type":"string","description":"Name of configuration; appears in the launch configuration drop down menu.","default":"Launch"},"request":{"enum":["attach"],"description":"Request type of configuration. Can be \"launch\" or \"attach\"."},"debugServer":{"type":"number","description":"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Task to run before debug session starts."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Controls behavior of the internal debug console.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."},"linux":{"type":"object","description":"Linux specific launch configuration attributes.","properties":{"type":{"enum":["cppvsdbg"],"description":"Type of configuration.","pattern":"^(?!node2)","errorMessage":"The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.","patternErrorMessage":"\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."},"symbolSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"processId":{"anyOf":[{"type":"string","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":"${command:pickProcess}"},{"type":"integer","description":"Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":0}]},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process.","default":""},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false}}},"name":{"type":"string","description":"Name of configuration; appears in the launch configuration drop down menu.","default":"Launch"},"request":{"enum":["attach"],"description":"Request type of configuration. Can be \"launch\" or \"attach\"."},"debugServer":{"type":"number","description":"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode","default":4711},"preLaunchTask":{"type":["string","null"],"default":null,"description":"Task to run before debug session starts."},"internalConsoleOptions":{"enum":["neverOpen","openOnSessionStart","openOnFirstSessionStart"],"default":"openOnFirstSessionStart","description":"Controls behavior of the internal debug console.","scope":1,"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."}},"pattern":"^(?!.*\\$\\{(env|config|command)\\.)","patternErrorMessage":"'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."}},"additionalProperties":false,"type":"object"}}}],"jsonValidation":[{"fileMatch":"c_cpp_properties.json","url":"./c_cpp_properties.schema.json"}],"menus":{"editor/context":[{"when":"editorLangId == c","command":"C_Cpp.GoToDeclaration","group":"navigation@2"},{"when":"editorLangId == cpp","command":"C_Cpp.GoToDeclaration","group":"navigation@2"},{"when":"editorLangId == c","command":"C_Cpp.PeekDeclaration","group":"navigation@3"},{"when":"editorLangId == cpp","command":"C_Cpp.PeekDeclaration","group":"navigation@3"},{"when":"editorLangId == c","command":"C_Cpp.SwitchHeaderSource","group":"other@1"},{"when":"editorLangId == cpp","command":"C_Cpp.SwitchHeaderSource","group":"other@1"},{"when":"editorLangId == c","command":"C_Cpp.Navigate","group":"other@2"},{"when":"editorLangId == cpp","command":"C_Cpp.Navigate","group":"other@2"},{"when":"editorLangId == c","command":"workbench.action.gotoSymbol","group":"other@3"},{"when":"editorLangId == cpp","command":"workbench.action.gotoSymbol","group":"other@3"},{"when":"editorLangId == c","command":"workbench.action.showAllSymbols","group":"other@4"},{"when":"editorLangId == cpp","command":"workbench.action.showAllSymbols","group":"other@4"}]},"configurationDefaults":{"[cpp]":{"editor.autoIndent":false},"[c]":{"editor.autoIndent":false}}},"scripts":{"compile":"npm run vscode:prepublish","integrationTests":"gulp integrationTests","postinstall":"node ./node_modules/vscode/bin/install","pretest":"tsc -p ./","test":"gulp allTests","tslint":"gulp tslint","unitTests":"gulp unitTests","vscode:prepublish":"node ./src/Support/prepublish.js","watch":"tsc -watch -p ./"},"devDependencies":{"@types/mocha":"^2.2.43","@types/node":"^8.0.46","gulp-env":"0.4.0","gulp-mocha":"5.0.0","gulp-tslint":"8.1.2","gulp":"3.9.1","mocha":"^4.0.1","tslint-microsoft-contrib":"5.0.1","tslint-no-unused-expression-chai":"0.0.3","tslint":"5.8.0","typescript":"^2.5.3","vscode":"^1.1.6"},"dependencies":{"http-proxy-agent":"~2.0.0","https-proxy-agent":"~2.1.0","jsonc-parser":"^1.0.0","minimatch":"~3.0.4","mkdirp":"~0.5.1","tmp":"~0.0.33","vscode-debugadapter":"~1.24.0","vscode-debugprotocol":"~1.24.0","vscode-extension-telemetry":"~0.0.11","vscode-languageclient":"~3.4.5","yauzl":"~2.8.0"},"runtimeDependencies":[{"description":"C/C++ language components (Linux / x86_64)","url":"https://go.microsoft.com/fwlink/?linkid=871264","platforms":["linux"],"architectures":["x86_64"],"binaries":["/home/humble_d/.vscode/extensions/ms-vscode.cpptools-0.16.1/bin/Microsoft.VSCode.CPP.Extension.linux","/home/humble_d/.vscode/extensions/ms-vscode.cpptools-0.16.1/bin/Microsoft.VSCode.CPP.IntelliSense.Msvc.linux"],"tmpFile":{"name":"/tmp/package-32572aGjwJ2s7xT2v.tmp","fd":35}},{"description":"C/C++ language components (Linux / x86)","url":"https://go.microsoft.com/fwlink/?linkid=871265","platforms":["linux"],"architectures":["x86","i686","i386"],"binaries":["/home/humble_d/.vscode/extensions/ms-vscode.cpptools-0.16.1/bin/Microsoft.VSCode.CPP.Extension.linux","/home/humble_d/.vscode/extensions/ms-vscode.cpptools-0.16.1/bin/Microsoft.VSCode.CPP.IntelliSense.Msvc.linux"]},{"description":"C/C++ language components (OS X)","url":"https://go.microsoft.com/fwlink/?linkid=871266","platforms":["darwin"],"binaries":["/home/humble_d/.vscode/extensions/ms-vscode.cpptools-0.16.1/bin/Microsoft.VSCode.CPP.Extension.darwin","/home/humble_d/.vscode/extensions/ms-vscode.cpptools-0.16.1/bin/Microsoft.VSCode.CPP.IntelliSense.Msvc.darwin"]},{"description":"C/C++ language components (Windows)","url":"https://go.microsoft.com/fwlink/?linkid=871267","platforms":["win32"],"binaries":[]},{"description":"ClangFormat (Linux / x86_64)","url":"https://go.microsoft.com/fwlink/?LinkID=848955","platforms":["linux"],"architectures":["x86_64"],"binaries":["/home/humble_d/.vscode/extensions/ms-vscode.cpptools-0.16.1/LLVM/bin/clang-format"],"tmpFile":{"name":"/tmp/package-32572RwkCCCFwP0ko.tmp","fd":33}},{"description":"ClangFormat (Linux / x86)","url":"https://go.microsoft.com/fwlink/?LinkID=864640","platforms":["linux"],"architectures":["x86","i686","i386"],"binaries":["/home/humble_d/.vscode/extensions/ms-vscode.cpptools-0.16.1/LLVM/bin/clang-format"]},{"description":"ClangFormat (OS X)","url":"https://go.microsoft.com/fwlink/?LinkID=848956","platforms":["darwin"],"binaries":["/home/humble_d/.vscode/extensions/ms-vscode.cpptools-0.16.1/LLVM/bin/clang-format.darwin"]},{"description":"ClangFormat (Windows)","url":"https://go.microsoft.com/fwlink/?LinkID=848957","platforms":["win32"],"binaries":[]},{"description":"Mono Framework Assemblies","url":"https://go.microsoft.com/fwlink/?LinkId=816539","platforms":["linux","darwin"],"binaries":[],"tmpFile":{"name":"/tmp/package-32572o77q8qMrvv8y.tmp","fd":41}},{"description":"Mono Runtime (Linux / x86)","url":"https://go.microsoft.com/fwlink/?LinkId=816540","platforms":["linux"],"architectures":["x86","i686","i386"],"binaries":["/home/humble_d/.vscode/extensions/ms-vscode.cpptools-0.16.1/debugAdapters/mono.linux-x86"]},{"description":"Mono Runtime (Linux / x86_64)","url":"https://go.microsoft.com/fwlink/?LinkId=816541","platforms":["linux"],"architectures":["x86_64"],"binaries":["/home/humble_d/.vscode/extensions/ms-vscode.cpptools-0.16.1/debugAdapters/mono.linux-x86_64"],"tmpFile":{"name":"/tmp/package-32572Imy79OnSUS8Q.tmp","fd":45}},{"description":"Mono Runtime (OS X)","url":"https://go.microsoft.com/fwlink/?LinkId=816542","platforms":["darwin"],"binaries":["/home/humble_d/.vscode/extensions/ms-vscode.cpptools-0.16.1/debugAdapters/mono.osx"]},{"description":"LLDB 3.8.0 (OS X)","url":"https://go.microsoft.com/fwlink/?LinkID=817244","platforms":["darwin"],"binaries":["/home/humble_d/.vscode/extensions/ms-vscode.cpptools-0.16.1/debugAdapters/lldb/bin/debugserver","/home/humble_d/.vscode/extensions/ms-vscode.cpptools-0.16.1/debugAdapters/lldb/bin/lldb-mi","/home/humble_d/.vscode/extensions/ms-vscode.cpptools-0.16.1/debugAdapters/lldb/bin/lldb-argdumper","/home/humble_d/.vscode/extensions/ms-vscode.cpptools-0.16.1/debugAdapters/lldb/bin/lldb-launcher"]},{"description":"Visual Studio Windows Debugger","url":"https://go.microsoft.com/fwlink/?linkid=852926","platforms":["win32"],"binaries":[]}],"uuid":"690b692e-e8a9-493f-b802-8089d50ac1b2","isBuiltin":false,"id":"ms-vscode.cpptools","extensionFolderPath":"/home/humble_d/.vscode/extensions/ms-vscode.cpptools-0.16.1"},{"name":"theme-oceandeeper","displayName":"OceanDeeper","description":"A darker version of the original OceanDeep VIM theme","homepage":"https://github.com/pierrenel/VSOceanDeep/blob/master/README.md","version":"0.1.0","publisher":"pierrenel","engines":{"vscode":"^1.10.0"},"icon":"icon.png","categories":["Themes"],"contributes":{"themes":[{"label":"OceanDeeper","uiTheme":"vs-dark","path":"./themes/OceanDeeper.tmTheme"}]},"uuid":"b8c879c2-e1c4-4243-8f49-87cf6dead9d9","isBuiltin":false,"id":"pierrenel.theme-oceandeeper","extensionFolderPath":"/home/humble_d/.vscode/extensions/pierrenel.theme-oceandeeper-0.1.0"},{"name":"java","displayName":"Language Support for Java(TM) by Red Hat","description":"Language Support for Java(TM) for Visual Studio Code provided by Red Hat","author":"Red Hat","icon":"icons/icon128.png","license":"EPL-1.0","version":"0.24.0","publisher":"redhat","bugs":"https://github.com/redhat-developer/vscode-java/issues","preview":true,"engines":{"vscode":"^1.15.0"},"repository":{"type":"git","url":"https://github.com/redhat-developer/vscode-java"},"categories":["Programming Languages","Linters"],"keywords":["multi-root ready"],"activationEvents":["onLanguage:java","onCommand:java.show.references","onCommand:java.show.implementations","onCommand:java.open.output","onCommand:java.open.serverLog","onCommand:java.execute.workspaceCommand","onCommand:java.projectConfiguration.update","workspaceContains:pom.xml","workspaceContains:build.gradle"],"main":"/home/humble_d/.vscode/extensions/redhat.java-0.24.0/out/src/extension","contributes":{"languages":[{"id":"java","extensions":[".class"],"configuration":"./language-configuration.json"}],"snippets":[{"language":"java","path":"./snippets/java.json"}],"configuration":{"type":"object","title":"Java configuration","properties":{"java.home":{"type":["string","null"],"default":null,"description":"Specifies the folder path to the JDK (8 or more recent) used to launch the Java Language Server.\nOn Windows, backslashes must be escaped, i.e.\n\"java.home\":\"C:\\\\Program Files\\\\Java\\\\jdk1.8.0_161\"","scope":"window"},"java.jdt.ls.vmargs":{"type":["string","null"],"default":"-noverify -Xmx1G -XX:+UseG1GC -XX:+UseStringDeduplication","description":"Specifies extra VM arguments used to launch the Java Language Server. Eg. use `-noverify -Xmx1G  -XX:+UseG1GC -XX:+UseStringDeduplication` to bypass class verification, increase the heap size to 1GB and enable String deduplication with the G1 Garbage collector","scope":"window"},"java.errors.incompleteClasspath.severity":{"type":["string"],"enum":["ignore","info","warning","error"],"default":"warning","description":"Specifies the severity of the message when the classpath is incomplete for a Java file","scope":"window"},"java.configuration.updateBuildConfiguration":{"type":["string"],"enum":["disabled","interactive","automatic"],"default":"interactive","description":"Specifies how modifications on build files update the Java classpath/configuration","scope":"window"},"java.trace.server":{"type":"string","enum":["off","messages","verbose"],"default":"off","description":"Traces the communication between VS Code and the Java language server.","scope":"window"},"java.import.gradle.enabled":{"type":"boolean","default":true,"description":"Enable/disable the Gradle importer.","scope":"window"},"java.import.maven.enabled":{"type":"boolean","default":true,"description":"Enable/disable the Maven importer.","scope":"window"},"java.referencesCodeLens.enabled":{"type":"boolean","default":false,"description":"Enable/disable the references code lens.","scope":"window"},"java.signatureHelp.enabled":{"type":"boolean","default":false,"description":"Enable/disable the signature help.","scope":"window"},"java.implementationsCodeLens.enabled":{"type":"boolean","default":false,"description":"Enable/disable the implementations code lens.","scope":"window"},"java.configuration.maven.userSettings":{"type":"string","default":null,"description":"Absolute path to Maven's settings.xml","scope":"window"},"java.format.enabled":{"type":"boolean","default":true,"description":"Enable/disable default Java formatter","scope":"window"},"java.saveActions.organizeImports":{"type":"boolean","default":false,"description":"Enable/disable auto organize imports on save action","scope":"window"},"java.import.exclusions":{"type":"array","description":"Configure glob patterns for excluding folders","default":["**/node_modules/**","**/.metadata/**","**/archetype-resources/**","**/META-INF/maven/**"],"scope":"window"},"java.contentProvider.preferred":{"type":"string","description":"Preferred content provider (a 3rd party decompiler id, usually)","default":null,"scope":"window"},"java.autobuild.enabled":{"type":"boolean","default":true,"description":"Enable/disable the 'auto build'","scope":"window"},"java.completion.overwrite":{"type":"boolean","default":true,"description":"When set to true, code completion overwrites the current text. When set to false, code is simply added instead.","scope":"window"},"java.completion.favoriteStaticMembers":{"type":"array","description":"Defines a list of static members or types with static members. Content assist will propose those static members even if the import is missing.","default":["org.junit.Assert.*","org.junit.Assume.*","org.junit.jupiter.api.Assertions.*","org.junit.jupiter.api.Assumptions.*","org.junit.jupiter.api.DynamicContainer.*","org.junit.jupiter.api.DynamicTest.*"],"scope":"window"},"java.completion.importOrder":{"type":"array","description":"Defines the sorting order of import statements. A package or type name prefix (e.g. 'org.eclipse') is a valid entry. An import is always added to the most specific group.","default":["java","javax","com","org"],"scope":"window"},"java.progressReports.enabled":{"type":"boolean","description":"[Experimental] Enable/disable progress reports from background processes on the server.","default":true,"scope":"window"},"java.format.settings.url":{"type":"string","description":"Specifies the url or file path to the [Eclipse formatter xml settings](https://github.com/redhat-developer/vscode-java/wiki/Formatter-settings).","default":null,"scope":"window"},"java.format.settings.profile":{"type":"string","description":"Optional formatter profile name from the Eclipse formatter settings.","default":null,"scope":"window"},"java.format.comments.enabled":{"type":"boolean","description":"Includes the comments during code formatting.","default":true,"scope":"window"}}},"commands":[{"command":"java.projectConfiguration.update","title":"Update project configuration","category":"Java"},{"command":"java.open.serverLog","title":"Open Java Language Server log file","category":"Java"},{"command":"java.workspace.compile","title":"Force Java compilation","category":"Java"},{"command":"java.edit.organizeImports","title":"Organize Imports","category":"Java"}],"keybindings":[{"command":"java.projectConfiguration.update","key":"shift+alt+u","when":"editorFocus"},{"command":"java.edit.organizeImports","key":"shift+alt+o","when":"editorTextFocus && !editorReadonly && editorLangId == java"},{"command":"java.workspace.compile","key":"shift+alt+b"}],"menus":{"explorer/context":[{"command":"java.projectConfiguration.update","when":"resourceFilename =~ /(.*\\.gradle)|(pom.xml)$/","group":"1_javaactions"}],"editor/context":[{"command":"java.edit.organizeImports","when":"resourceLangId == java","group":"1_javaactions"},{"command":"java.projectConfiguration.update","when":"resourceFilename =~ /(.*\\.gradle)|(pom.xml)$/","group":"1_javaactions"}],"commandPalette":[{"command":"java.edit.organizeImports","when":"!editorReadonly && editorLangId == java"}]}},"scripts":{"vscode:prepublish":"tsc -p ./","watch":"tsc -watch -p ./","postinstall":"node ./node_modules/vscode/bin/install","test":"node ./node_modules/vscode/bin/test","build-server":"./node_modules/.bin/gulp build_server","watch-server":"./node_modules/.bin/gulp watch_server","tslint":"./node_modules/.bin/gulp tslint"},"devDependencies":{"typescript":"^2.3.4","vscode":"^1.1.4","mocha":"^3.2.0","@types/node":"^6.0.40","@types/mocha":"^2.2.39","@types/glob":"5.0.30","gulp":"^3.9.1","gulp-tslint":"^8.1.1","tslint":"^5.5.0","gulp-decompress":"2.0.1","gulp-download":"0.0.1"},"dependencies":{"vscode-languageclient":"^3.5.0","find-java-home":"0.1.4","tmp":"^0.0.31","path-exists":"^3.0.0","expand-home-dir":"^0.0.3","glob":"^7.1.1"},"uuid":"198a707e-28af-4e84-8610-6e2f628dd12d","isBuiltin":false,"id":"redhat.java","extensionFolderPath":"/home/humble_d/.vscode/extensions/redhat.java-0.24.0"},{"name":"perltidy","displayName":"perltidy","description":"A Perl code formatter for VSCode","version":"1.3.0","publisher":"sfodje","license":"MIT","bugs":{"url":"https://github.com/sfodje/perltidy/issues","email":"sfodje@outlook.com"},"homepage":"https://github.com/sfodje/perltidy/blob/master/README.md","repository":{"type":"git","url":"https://github.com/sfodje/perltidy"},"engines":{"vscode":"^1.6.0"},"categories":["Linters","Formatters","Other"],"activationEvents":["*"],"main":"/home/humble_d/.vscode/extensions/sfodje.perltidy-1.3.0/out/src/extension","contributes":{"configuration":{"type":"object","title":"Perl Tidy Configuration","properties":{"perltidy.executable":{"type":"string","default":"perltidy","description":"Path to 'linter' executable"},"perltidy.profile":{"type":"string","description":"Path to .perltidyrc file"},"perltidy.additionalArguments":{"type":"array","default":[],"description":"Additional arguments for Perl::Tidy e.g. ['-st', '--indent-columns=3]"}}},"languages":[{"id":"perl","aliases":["PERL"],"extensions":[".pl",".pm",".t"],"configuration":"./language-configuration.json"}]},"scripts":{"vscode:prepublish":"tsc -p ./","compile":"tsc -watch -p ./","postinstall":"node ./node_modules/vscode/bin/install","test":"node ./node_modules/vscode/bin/test"},"devDependencies":{"typescript":"^2.0.3","vscode":"^1.0.0","mocha":"^2.3.3","@types/node":"^6.0.40","@types/mocha":"^2.2.32"},"dependencies":{"child_process":"^1.0.2","which":"^1.2.12"},"uuid":"209a4d19-ef1b-4b05-a3b6-53f505a7d532","isBuiltin":false,"id":"sfodje.perltidy","extensionFolderPath":"/home/humble_d/.vscode/extensions/sfodje.perltidy-1.3.0"},{"name":"bash-beautify","displayName":"Bash Beautify","description":"Format / Beautify bash and shell scripts","version":"0.1.1","publisher":"shakram02","repository":"https://github.com/shakram02/bash_beautify","galleryBanner":{"color":"#ff6e07","theme":"dark"},"author":{"email":"ahmedhamdyau@gmail.com","name":"Ahmed Hamdy (shakram02)","url":"https://github.com/shakram02"},"keywords":["shell script","bash script","bash","formatter","beautifier"],"license":"MIT","homepage":"https://github.com/shakram02/bash_beautify","icon":"images/shell-beautify.png","engines":{"vscode":"^1.12.0"},"categories":["Formatters"],"contributes":{"languages":[{"id":"shellscript","extensions":[".sh"]}],"configuration":{"title":"Bash Beautify Configuration","properties":{"bashBeautify.tabSize":{"type":"integer","minimum":1,"default":4,"description":"Number of spaces for a signle indnent"}}}},"activationEvents":["onLanguage:shellscript"],"main":"/home/humble_d/.vscode/extensions/shakram02.bash-beautify-0.1.1/out/src/extension","scripts":{"vscode:prepublish":"tsc -p ./","compile":"tsc -watch -p ./","postinstall":"node ./node_modules/vscode/bin/install"},"devDependencies":{"typescript":"^2.0.3","vscode":"^1.0.0","mocha":"^2.3.3","@types/node":"^6.0.40","@types/mocha":"^2.2.32"},"dependencies":{"child-process-promise":"^2.2.1","gulp":"^3.9.1","gulp-typescript":"^3.1.7"},"uuid":"3cd12c20-0143-473f-b7f3-0d5f15cb7249","isBuiltin":false,"id":"shakram02.bash-beautify","extensionFolderPath":"/home/humble_d/.vscode/extensions/shakram02.bash-beautify-0.1.1"},{"name":"material-palenight-theme","publisher":"whizkydee","author":"Olaolu Olawuyi <mrolaolu@gmail.com> (http://twitter.com/mrolaolu)","displayName":"Material Palenight Theme","version":"1.7.3","description":"An elegant and juicy material-like theme for Visual Studio Code.","galleryBanner":{"color":"#31364A","theme":"dark"},"icon":"icon.png","keywords":["material theme","palenight","material","purple","dark"],"repository":{"url":"https://github.com/whizkydee/vscode-material-palenight-theme","type":"git"},"bugs":{"url":"https://github.com/whizkydee/vscode-material-palenight-theme/issues"},"license":"MIT","engines":{"vscode":"^1.12.0"},"scripts":{"start":"nodemon --exec vsce package","build":"nodemon --watch src src"},"categories":["Themes","Other"],"contributes":{"themes":[{"label":"Palenight Theme","uiTheme":"vs-dark","path":"./themes/palenight.json"},{"label":"Palenight Italic","uiTheme":"vs-dark","path":"./themes/palenight-italic.json"},{"label":"Palenight Operator","uiTheme":"vs-dark","path":"./themes/palenight-operator.json"}]},"devDependencies":{"nodemon":"^1.12.1","vsce":"^1.31.0"},"uuid":"7f147721-ec06-4043-9e37-c9ffbecbccd1","isBuiltin":false,"id":"whizkydee.material-palenight-theme","extensionFolderPath":"/home/humble_d/.vscode/extensions/whizkydee.material-palenight-theme-1.7.3"}]}